{"version":3,"file":"12-simple-queries.js","sourceRoot":"","sources":["../../src/test/12-simple-queries.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from \"chai\";\nimport { DocumentCollection } from \"../collection\";\nimport { ArrayCursor } from \"../cursor\";\nimport { Database } from \"../database\";\n\nconst range = (n: number): number[] => Array.from(Array(n).keys());\nconst alpha = (i: number): string => String.fromCharCode(\"a\".charCodeAt(0) + i);\n\nconst ARANGO_URL = process.env.TEST_ARANGODB_URL || \"http://localhost:8529\";\nconst ARANGO_VERSION = Number(\n  process.env.ARANGO_VERSION || process.env.ARANGOJS_DEVEL_VERSION || 30400\n);\n\ndescribe(\"Simple queries\", function () {\n  let name = `testdb_${Date.now()}`;\n  let db: Database;\n  let collection: DocumentCollection;\n  before(async () => {\n    db = new Database({ url: ARANGO_URL, arangoVersion: ARANGO_VERSION });\n    await db.createDatabase(name);\n    db.useDatabase(name);\n  });\n  after(async () => {\n    try {\n      db.useDatabase(\"_system\");\n      await db.dropDatabase(name);\n    } finally {\n      db.close();\n    }\n  });\n  beforeEach(async () => {\n    collection = await db.createCollection(`c_${Date.now()}`);\n    await Promise.all(\n      range(10).map((i) =>\n        collection.save({\n          _key: alpha(i),\n          value: i + 1,\n          group: Math.floor(i / 2) + 1,\n        })\n      )\n    );\n  });\n  afterEach(async () => {\n    await collection.drop();\n  });\n  describe(\"collection.all\", () => {\n    it(\"returns a cursor for all documents in the collection\", async () => {\n      const cursor = await collection.all();\n      expect(cursor).to.be.an.instanceof(ArrayCursor);\n      expect(cursor.count).to.equal(10);\n      const arr = await cursor.all();\n      expect(arr).to.have.length(10);\n      arr.forEach((doc: any) => {\n        expect(doc).to.have.keys(\"_key\", \"_id\", \"_rev\", \"value\", \"group\");\n        expect(doc._id).to.equal(`${collection.name}/${doc._key}`);\n        expect(doc.group).to.equal(Math.floor((doc.value - 1) / 2) + 1);\n      });\n      expect(arr.map((d: any) => d.value).sort()).to.eql(\n        range(10)\n          .map((i) => i + 1)\n          .sort()\n      );\n      expect(arr.map((d: any) => d._key).sort()).to.eql(\n        range(10).map(alpha).sort()\n      );\n    });\n  });\n  describe(\"collection.any\", () => {\n    it(\"returns a random document from the collection\", async () => {\n      const doc = await collection.any();\n      expect(doc).to.have.keys(\"_key\", \"_id\", \"_rev\", \"value\", \"group\");\n      expect(doc._key).to.equal(alpha(doc.value - 1));\n      expect(doc._id).to.equal(`${collection.name}/${doc._key}`);\n      expect(doc.value).to.be.within(1, 10);\n      expect(doc.group).to.equal(Math.floor((doc.value - 1) / 2) + 1);\n    });\n  });\n  describe(\"collection.byExample\", () => {\n    it(\"returns all documents matching the example\", async () => {\n      const cursor = await collection.byExample({ group: 2 });\n      expect(cursor).to.be.an.instanceof(ArrayCursor);\n      const arr = await cursor.all();\n      expect(arr).to.have.length(2);\n      arr.forEach((doc: any) => {\n        expect(doc).to.have.keys(\"_key\", \"_id\", \"_rev\", \"value\", \"group\");\n        expect(doc._id).to.equal(`${collection.name}/${doc._key}`);\n        expect(doc.group).to.equal(2);\n      });\n      expect(arr.map((d: any) => d._key).sort()).to.eql([\"c\", \"d\"]);\n      expect(arr.map((d: any) => d.value).sort()).to.eql([3, 4]);\n    });\n  });\n  describe(\"collection.firstExample\", () => {\n    it(\"returns the first document matching the example\", async () => {\n      const doc = await collection.firstExample({ group: 2 });\n      expect(doc).to.have.keys(\"_key\", \"_id\", \"_rev\", \"value\", \"group\");\n      expect(doc._key).to.match(/^[cd]$/);\n      expect(doc._id).to.equal(`${collection.name}/${doc._key}`);\n      expect(doc.group).to.equal(2);\n    });\n  });\n  describe(\"collection.lookupByKeys\", () => {\n    it(\"returns the documents with the given keys\", async () => {\n      const arr = await collection.lookupByKeys([\"b\", \"c\", \"d\"]);\n      expect(arr).to.have.length(3);\n      arr.forEach((doc: any) => {\n        expect(doc).to.have.keys(\"_key\", \"_id\", \"_rev\", \"value\", \"group\");\n        expect(doc._id).to.equal(`${collection.name}/${doc._key}`);\n        expect(doc.group).to.equal(Math.floor((doc.value - 1) / 2) + 1);\n      });\n      expect(arr.map((d: any) => d._key)).to.eql([\"b\", \"c\", \"d\"]);\n    });\n  });\n});\n"]}