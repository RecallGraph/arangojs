{"version":3,"file":"11-managing-indexes.js","sourceRoot":"","sources":["../../src/test/11-managing-indexes.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from \"chai\";\nimport { DocumentCollection } from \"../collection\";\nimport { Database } from \"../database\";\n\nconst ARANGO_URL = process.env.TEST_ARANGODB_URL || \"http://localhost:8529\";\nconst ARANGO_VERSION = Number(\n  process.env.ARANGO_VERSION || process.env.ARANGOJS_DEVEL_VERSION || 30400\n);\nconst itPre34 = ARANGO_VERSION < 30400 ? it : it.skip;\nconst it34 = ARANGO_VERSION >= 30400 ? it : it.skip;\n\ndescribe(\"Managing indexes\", function () {\n  let db: Database;\n  let collection: DocumentCollection;\n  const dbName = `testdb_${Date.now()}`;\n  const collectionName = `collection-${Date.now()}`;\n  before(async () => {\n    db = new Database({ url: ARANGO_URL, arangoVersion: ARANGO_VERSION });\n    await db.createDatabase(dbName);\n    db.useDatabase(dbName);\n    collection = await db.createCollection(collectionName);\n  });\n  after(async () => {\n    try {\n      db.useDatabase(\"_system\");\n      await db.dropDatabase(dbName);\n    } finally {\n      db.close();\n    }\n  });\n  describe(\"collection.ensureIndex#hash\", () => {\n    it(\"should create a hash index\", async () => {\n      const info = await collection.ensureIndex({\n        type: \"hash\",\n        fields: [\"value\"],\n      });\n      expect(info).to.have.property(\"id\");\n      expect(info).to.have.property(\"type\", \"hash\");\n      expect(info).to.have.property(\"fields\");\n      expect(info.fields).to.eql([\"value\"]);\n      expect(info).to.have.property(\"isNewlyCreated\", true);\n    });\n  });\n  describe(\"collection.ensureIndex#skiplist\", () => {\n    it(\"should create a skiplist index\", async () => {\n      const info = await collection.ensureIndex({\n        type: \"skiplist\",\n        fields: [\"value\"],\n      });\n      expect(info).to.have.property(\"id\");\n      expect(info).to.have.property(\"type\", \"skiplist\");\n      expect(info).to.have.property(\"fields\");\n      expect(info.fields).to.eql([\"value\"]);\n      expect(info).to.have.property(\"isNewlyCreated\", true);\n    });\n  });\n  describe(\"collection.ensureIndex#persistent\", () => {\n    it(\"should create a persistent index\", async () => {\n      const info = await collection.ensureIndex({\n        type: \"persistent\",\n        fields: [\"value\"],\n      });\n      expect(info).to.have.property(\"id\");\n      expect(info).to.have.property(\"type\", \"persistent\");\n      expect(info).to.have.property(\"fields\");\n      expect(info.fields).to.eql([\"value\"]);\n      expect(info).to.have.property(\"isNewlyCreated\", true);\n    });\n  });\n  describe(\"collection.ensureIndex#geo\", () => {\n    itPre34(\"should create a geo1 index for one field\", async () => {\n      const info = await collection.ensureIndex({\n        type: \"geo\",\n        fields: [\"value\"],\n      });\n      expect(info).to.have.property(\"id\");\n      expect(info).to.have.property(\"type\", \"geo1\");\n      expect(info).to.have.property(\"fields\");\n      expect(info.fields).to.eql([\"value\"]);\n      expect(info).to.have.property(\"isNewlyCreated\", true);\n    });\n    itPre34(\"should create a geo2 index for two fields\", async () => {\n      const info = await collection.ensureIndex({\n        type: \"geo\",\n        fields: [\"value1\", \"value2\"],\n      });\n      expect(info).to.have.property(\"id\");\n      expect(info).to.have.property(\"type\", \"geo2\");\n      expect(info).to.have.property(\"fields\");\n      expect(info.fields).to.eql([\"value1\", \"value2\"]);\n      expect(info).to.have.property(\"isNewlyCreated\", true);\n    });\n    it34(\"should create a geo index for one field\", async () => {\n      const info = await collection.ensureIndex({\n        type: \"geo\",\n        fields: [\"value\"],\n      });\n      expect(info).to.have.property(\"id\");\n      expect(info).to.have.property(\"type\", \"geo\");\n      expect(info).to.have.property(\"fields\");\n      expect(info.fields).to.eql([\"value\"]);\n      expect(info).to.have.property(\"isNewlyCreated\", true);\n    });\n    it34(\"should create a geo index for two fields\", async () => {\n      const info = await collection.ensureIndex({\n        type: \"geo\",\n        fields: [\"value1\", \"value2\"],\n      });\n      expect(info).to.have.property(\"id\");\n      expect(info).to.have.property(\"type\", \"geo\");\n      expect(info).to.have.property(\"fields\");\n      expect(info.fields).to.eql([\"value1\", \"value2\"]);\n      expect(info).to.have.property(\"isNewlyCreated\", true);\n    });\n  });\n  describe(\"collection.ensureIndex#fulltext\", () => {\n    it(\"should create a fulltext index\", async () => {\n      const info = await collection.ensureIndex({\n        type: \"fulltext\",\n        fields: [\"value\"],\n      });\n      expect(info).to.have.property(\"id\");\n      expect(info).to.have.property(\"type\", \"fulltext\");\n      expect(info).to.have.property(\"fields\");\n      expect(info.fields).to.eql([\"value\"]);\n      expect(info).to.have.property(\"isNewlyCreated\", true);\n    });\n  });\n  describe(\"collection.index\", () => {\n    it(\"should return information about a index\", async () => {\n      const info = await collection.ensureIndex({\n        type: \"hash\",\n        fields: [\"test\"],\n      });\n      const index = await collection.index(info.id);\n      expect(index).to.have.property(\"id\", info.id);\n      expect(index).to.have.property(\"type\", info.type);\n    });\n  });\n  describe(\"collection.indexes\", () => {\n    it(\"should return a list of indexes\", async () => {\n      const index = await collection.ensureIndex({\n        type: \"hash\",\n        fields: [\"test\"],\n      });\n      const indexes = await collection.indexes();\n      expect(indexes).to.be.instanceof(Array);\n      expect(indexes).to.not.be.empty;\n      expect(indexes.filter((i: any) => i.id === index.id).length).to.equal(1);\n    });\n  });\n  describe(\"collection.dropIndex\", () => {\n    it(\"should drop existing index\", async () => {\n      const info = await collection.ensureIndex({\n        type: \"hash\",\n        fields: [\"test\"],\n      });\n      const index = await collection.dropIndex(info.id);\n      expect(index).to.have.property(\"id\", info.id);\n      const indexes = await collection.indexes();\n      expect(indexes).to.be.instanceof(Array);\n      expect(indexes).to.not.be.empty;\n      expect(indexes.filter((i: any) => i.id === index.id).length).to.equal(0);\n    });\n  });\n});\n"]}