{"version":3,"file":"04-transactions.js","sourceRoot":"","sources":["../../src/test/04-transactions.ts"],"names":[],"mappings":";;AAAA,+BAA8B;AAE9B,0CAAuC;AAEvC,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI,uBAAuB,CAAC;AAC5E,MAAM,cAAc,GAAG,MAAM,CAC3B,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,OAAO,CAAC,GAAG,CAAC,sBAAsB,IAAI,KAAK,CAC1E,CAAC;AACF,MAAM,UAAU,GAAG,cAAc,IAAI,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;AACtE,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,qBAAqB,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC;AAE7E,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,IAAI,EAAY,CAAC;IACjB,MAAM,CAAC,GAAG,EAAE;QACV,EAAE,GAAG,IAAI,mBAAQ,CAAC,EAAE,GAAG,EAAE,UAAU,EAAE,aAAa,EAAE,cAAc,EAAE,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;IACH,KAAK,CAAC,GAAG,EAAE;QACT,EAAE,CAAC,KAAK,EAAE,CAAC;IACb,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;QAC3C,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,kBAAkB,CACxC,EAAE,EACF,oCAAoC,EACpC,EAAE,MAAM,EAAE,MAAM,EAAE,CACnB,CAAC;YACF,aAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,UAAU,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACrC,MAAM,IAAI,GAAG,UAAU,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;QACpC,IAAI,UAA8B,CAAC;QACnC,MAAM,CAAC,KAAK,IAAI,EAAE;YAChB,MAAM,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAC9B,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;QACH,KAAK,CAAC,KAAK,IAAI,EAAE;YACf,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YAC1B,MAAM,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QACH,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,UAAU,GAAG,MAAM,EAAE,CAAC,gBAAgB,CAAC,cAAc,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QACH,SAAS,CAAC,KAAK,IAAI,EAAE;YACnB,IAAI;gBACF,MAAM,UAAU,CAAC,GAAG,EAAE,CAAC;aACxB;YAAC,OAAO,CAAC,EAAE;gBACV,OAAO;aACR;YACD,MAAM,UAAU,CAAC,IAAI,EAAE,CAAC;QAC1B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;YAC/C,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAClD;gBACE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,MAAM,GAAG,CAAC,GAAG,EAAE,CAAC;gBACvC,aAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBAC5B,aAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;aACpC;YACD;gBACE,MAAM,IAAI,GAAG,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBACpC,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,GAAG,EAAE,CAAC;gBACxC,aAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBAC5B,aAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;aACpC;YACD,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;YAC1C,aAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAC5B,aAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAClD,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,MAAM,GAAG,CAAC,KAAK,EAAE,CAAC;YACzC,aAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAC5B,aAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;YACrC,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAClD,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;YACrE,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAC9C,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;YAC1C,aAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAC5B,aAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YACrC,MAAM,GAAG,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC9C,aAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAClD,MAAM,KAAK,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YACvE,MAAM,KAAK,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YACvE,aAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YAChD,aAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YAChD,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;YAC1C,aAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAC5B,aAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YACrC,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAChD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YAC/C,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAChD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAClD,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;YACxD,IAAI,GAAQ,CAAC;YACb,IAAI;gBACF,GAAG,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;aACzC;YAAC,OAAO,CAAC,EAAE,GAAE;YACd,IAAI,GAAG;gBAAE,aAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YACvD,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;YAC1C,aAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAC5B,aAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,KAAK,CACH,yDAAyD,EACzD,KAAK,IAAI,EAAE;YACT,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAClD,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YACzD,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YACzD,IAAI,GAAQ,CAAC;YACb,IAAI;gBACF,GAAG,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;aAC1C;YAAC,OAAO,CAAC,EAAE,GAAE;YACd,IAAI,GAAG;gBAAE,aAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YACvD,IAAI;gBACF,GAAG,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;aAC1C;YAAC,OAAO,CAAC,EAAE,GAAE;YACd,IAAI,GAAG;gBAAE,aAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;YACvD,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;YAC1C,aAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAC5B,aAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACvC,CAAC,CACF,CAAC;QAEF,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAClD,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;YACrE,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAC9C,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,MAAM,GAAG,CAAC,KAAK,EAAE,CAAC;YACzC,aAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAC5B,aAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACnC,IAAI,GAAQ,CAAC;YACb,IAAI;gBACF,GAAG,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;aACzC;YAAC,OAAO,CAAC,EAAE,GAAE;YACd,IAAI,GAAG;gBAAE,aAAM,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;YAClD,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;YACrD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAC9C,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,MAAM,GAAG,CAAC,KAAK,EAAE,CAAC;YACzC,aAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAC5B,aAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACnC,MAAM,GAAG,GAAG,MAAM,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC9C,aAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { expect } from \"chai\";\nimport { DocumentCollection } from \"../collection\";\nimport { Database } from \"../database\";\n\nconst ARANGO_URL = process.env.TEST_ARANGODB_URL || \"http://localhost:8529\";\nconst ARANGO_VERSION = Number(\n  process.env.ARANGO_VERSION || process.env.ARANGOJS_DEVEL_VERSION || 30400\n);\nconst describe35 = ARANGO_VERSION >= 30500 ? describe : describe.skip;\nconst itRdb = process.env.ARANGO_STORAGE_ENGINE !== \"mmfiles\" ? it : it.skip;\n\ndescribe(\"Transactions\", () => {\n  let db: Database;\n  before(() => {\n    db = new Database({ url: ARANGO_URL, arangoVersion: ARANGO_VERSION });\n  });\n  after(() => {\n    db.close();\n  });\n  describe(\"database.executeTransaction\", () => {\n    it(\"should execute a transaction and return the result\", async () => {\n      const result = await db.executeTransaction(\n        [],\n        \"function (params) {return params;}\",\n        { params: \"test\" }\n      );\n      expect(result).to.equal(\"test\");\n    });\n  });\n  describe35(\"stream transactions\", () => {\n    const name = `testdb_${Date.now()}`;\n    let collection: DocumentCollection;\n    before(async () => {\n      await db.createDatabase(name);\n      db.useDatabase(name);\n    });\n    after(async () => {\n      db.useDatabase(\"_system\");\n      await db.dropDatabase(name);\n    });\n    beforeEach(async () => {\n      collection = await db.createCollection(`collection-${Date.now()}`);\n    });\n    afterEach(async () => {\n      try {\n        await collection.get();\n      } catch (e) {\n        return;\n      }\n      await collection.drop();\n    });\n\n    it(\"can commit an empty transaction\", async () => {\n      const trx = await db.beginTransaction(collection);\n      {\n        const { id, status } = await trx.get();\n        expect(id).to.equal(trx.id);\n        expect(status).to.equal(\"running\");\n      }\n      {\n        const trx2 = db.transaction(trx.id);\n        const { id, status } = await trx2.get();\n        expect(id).to.equal(trx.id);\n        expect(status).to.equal(\"running\");\n      }\n      const { id, status } = await trx.commit();\n      expect(id).to.equal(trx.id);\n      expect(status).to.equal(\"committed\");\n    });\n\n    it(\"can abort an empty transaction\", async () => {\n      const trx = await db.beginTransaction(collection);\n      const { id, status } = await trx.abort();\n      expect(id).to.equal(trx.id);\n      expect(status).to.equal(\"aborted\");\n    });\n\n    it(\"can insert a document\", async () => {\n      const trx = await db.beginTransaction(collection);\n      const meta = await trx.step(() => collection.save({ _key: \"test\" }));\n      expect(meta).to.have.property(\"_key\", \"test\");\n      const { id, status } = await trx.commit();\n      expect(id).to.equal(trx.id);\n      expect(status).to.equal(\"committed\");\n      const doc = await collection.document(\"test\");\n      expect(doc).to.have.property(\"_key\", \"test\");\n    });\n\n    it(\"can insert two documents sequentially\", async () => {\n      const trx = await db.beginTransaction(collection);\n      const meta1 = await trx.step(() => collection.save({ _key: \"test1\" }));\n      const meta2 = await trx.step(() => collection.save({ _key: \"test2\" }));\n      expect(meta1).to.have.property(\"_key\", \"test1\");\n      expect(meta2).to.have.property(\"_key\", \"test2\");\n      const { id, status } = await trx.commit();\n      expect(id).to.equal(trx.id);\n      expect(status).to.equal(\"committed\");\n      const doc1 = await collection.document(\"test1\");\n      expect(doc1).to.have.property(\"_key\", \"test1\");\n      const doc2 = await collection.document(\"test2\");\n      expect(doc2).to.have.property(\"_key\", \"test2\");\n    });\n\n    itRdb(\"does not leak when inserting a document\", async () => {\n      const trx = await db.beginTransaction(collection);\n      await trx.step(() => collection.save({ _key: \"test\" }));\n      let doc: any;\n      try {\n        doc = await collection.document(\"test\");\n      } catch (e) {}\n      if (doc) expect.fail(\"Document should not exist yet.\");\n      const { id, status } = await trx.commit();\n      expect(id).to.equal(trx.id);\n      expect(status).to.equal(\"committed\");\n    });\n\n    itRdb(\n      \"does not leak when inserting two documents sequentially\",\n      async () => {\n        const trx = await db.beginTransaction(collection);\n        await trx.step(() => collection.save({ _key: \"test1\" }));\n        await trx.step(() => collection.save({ _key: \"test2\" }));\n        let doc: any;\n        try {\n          doc = await collection.document(\"test1\");\n        } catch (e) {}\n        if (doc) expect.fail(\"Document should not exist yet.\");\n        try {\n          doc = await collection.document(\"test2\");\n        } catch (e) {}\n        if (doc) expect.fail(\"Document should not exist yet.\");\n        const { id, status } = await trx.commit();\n        expect(id).to.equal(trx.id);\n        expect(status).to.equal(\"committed\");\n      }\n    );\n\n    it(\"does not insert a document when aborted\", async () => {\n      const trx = await db.beginTransaction(collection);\n      const meta = await trx.step(() => collection.save({ _key: \"test\" }));\n      expect(meta).to.have.property(\"_key\", \"test\");\n      const { id, status } = await trx.abort();\n      expect(id).to.equal(trx.id);\n      expect(status).to.equal(\"aborted\");\n      let doc: any;\n      try {\n        doc = await collection.document(\"test\");\n      } catch (e) {}\n      if (doc) expect.fail(\"Document should not exist yet.\");\n    });\n\n    itRdb(\"does not revert unrelated changes when aborted\", async () => {\n      const trx = await db.beginTransaction(collection);\n      const meta = await collection.save({ _key: \"test\" });\n      expect(meta).to.have.property(\"_key\", \"test\");\n      const { id, status } = await trx.abort();\n      expect(id).to.equal(trx.id);\n      expect(status).to.equal(\"aborted\");\n      const doc = await collection.document(\"test\");\n      expect(doc).to.have.property(\"_key\", \"test\");\n    });\n  });\n});\n"]}