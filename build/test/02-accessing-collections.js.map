{"version":3,"file":"02-accessing-collections.js","sourceRoot":"","sources":["../../src/test/02-accessing-collections.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from \"chai\";\nimport { ArangoCollection, isArangoCollection } from \"../collection\";\nimport { Database } from \"../database\";\n\nconst range = (n: number): number[] => Array.from(Array(n).keys());\n\nconst ARANGO_URL = process.env.TEST_ARANGODB_URL || \"http://localhost:8529\";\nconst ARANGO_VERSION = Number(\n  process.env.ARANGO_VERSION || process.env.ARANGOJS_DEVEL_VERSION || 30400\n);\n\ndescribe(\"Accessing collections\", function () {\n  const name = `testdb_${Date.now()}`;\n  let db: Database;\n  let builtinSystemCollections: string[];\n  before(async () => {\n    db = new Database({ url: ARANGO_URL, arangoVersion: ARANGO_VERSION });\n    await db.createDatabase(name);\n    db.useDatabase(name);\n    const collections = await db.listCollections(false);\n    builtinSystemCollections = collections.map((c: any) => c.name);\n  });\n  after(async () => {\n    try {\n      db.useDatabase(\"_system\");\n      await db.dropDatabase(name);\n    } finally {\n      db.close();\n    }\n  });\n  describe(\"database.collection\", () => {\n    it(\"returns a DocumentCollection instance for the collection\", () => {\n      const name = \"potato\";\n      const collection = db.collection(name);\n      expect(isArangoCollection(collection)).to.equal(true);\n      expect(collection).to.have.property(\"name\").that.equals(name);\n    });\n  });\n  describe(\"database.listCollections\", () => {\n    const nonSystemCollectionNames = range(4).map(\n      (i) => `c_${Date.now()}_${i}`\n    );\n    const systemCollectionNames = range(4).map((i) => `_c_${Date.now()}_${i}`);\n    before(async () => {\n      await Promise.all([\n        ...nonSystemCollectionNames.map((name) => db.createCollection(name)),\n        ...systemCollectionNames.map((name) =>\n          db.collection(name).create({ isSystem: true })\n        ),\n      ] as Promise<ArangoCollection>[]);\n    });\n    after(async () => {\n      await Promise.all([\n        ...nonSystemCollectionNames.map((name) => db.collection(name).drop()),\n        ...systemCollectionNames.map((name) =>\n          db.collection(name).drop({ isSystem: true })\n        ),\n      ]);\n    });\n    it(\"fetches information about all non-system collections\", async () => {\n      const collections = await db.listCollections();\n      expect(collections.length).to.equal(nonSystemCollectionNames.length);\n      expect(collections.map((c: any) => c.name).sort()).to.eql(\n        nonSystemCollectionNames\n      );\n    });\n    it(\"includes system collections if explicitly passed false\", async () => {\n      const collections = await db.listCollections(false);\n      const allCollectionNames = nonSystemCollectionNames\n        .concat(systemCollectionNames)\n        .concat(builtinSystemCollections)\n        .sort();\n      expect(collections.length).to.be.at.least(allCollectionNames.length);\n      expect(collections.map((c: any) => c.name).sort()).to.eql(\n        allCollectionNames\n      );\n    });\n  });\n  describe(\"database.collections\", () => {\n    const documentCollectionNames = range(4).map(\n      (i) => `dc_${Date.now()}_${i}`\n    );\n    const edgeCollectionNames = range(4).map((i) => `ec_${Date.now()}_${i}`);\n    const systemCollectionNames = range(4).map((i) => `_c_${Date.now()}_${i}`);\n    before(async () => {\n      await Promise.all([\n        ...documentCollectionNames.map((name) => db.createCollection(name)),\n        ...edgeCollectionNames.map((name) => db.createEdgeCollection(name)),\n        ...systemCollectionNames.map((name) =>\n          db.collection(name).create({ isSystem: true })\n        ),\n      ] as Promise<ArangoCollection>[]);\n    });\n    after(async () => {\n      await Promise.all([\n        ...documentCollectionNames.map((name) => db.collection(name).drop()),\n        ...edgeCollectionNames.map((name) => db.collection(name).drop()),\n        ...systemCollectionNames.map((name) =>\n          db.collection(name).drop({ isSystem: true })\n        ),\n      ]);\n    });\n    it(\"creates Collection instances\", async () => {\n      const collections = await db.collections();\n      expect(collections.length).to.equal(\n        documentCollectionNames.length + edgeCollectionNames.length\n      );\n      expect(collections.map((c) => c.name).sort()).to.eql(\n        [...documentCollectionNames, ...edgeCollectionNames].sort()\n      );\n    });\n    it(\"includes system collections if explicitly passed false\", async () => {\n      const collections = await db.collections(false);\n      const allCollectionNames = [\n        ...documentCollectionNames,\n        ...edgeCollectionNames,\n        ...systemCollectionNames,\n        ...builtinSystemCollections,\n      ].sort();\n      expect(collections.map((c: any) => c.name).sort()).to.eql(\n        allCollectionNames\n      );\n    });\n  });\n});\n"]}