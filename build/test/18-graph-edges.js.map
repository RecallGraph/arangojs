{"version":3,"file":"18-graph-edges.js","sourceRoot":"","sources":["../../src/test/18-graph-edges.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from \"chai\";\nimport { Database } from \"../database\";\nimport { Graph } from \"../graph\";\n\nconst ARANGO_URL = process.env.TEST_ARANGODB_URL || \"http://localhost:8529\";\nconst ARANGO_VERSION = Number(\n  process.env.ARANGO_VERSION || process.env.ARANGOJS_DEVEL_VERSION || 30400\n);\n\ndescribe(\"Manipulating graph edges\", function () {\n  const dbName = `testdb_${Date.now()}`;\n  const graphName = `testgraph_${Date.now()}`;\n  let db: Database;\n  let graph: Graph;\n  before(async () => {\n    db = new Database({ url: ARANGO_URL, arangoVersion: ARANGO_VERSION });\n    await db.createDatabase(dbName);\n    db.useDatabase(dbName);\n  });\n  after(async () => {\n    try {\n      db.useDatabase(\"_system\");\n      await db.dropDatabase(dbName);\n    } finally {\n      db.close();\n    }\n  });\n  beforeEach(async () => {\n    graph = db.graph(graphName);\n    await graph.create([\n      {\n        collection: \"knows\",\n        from: [\"person\"],\n        to: [\"person\"],\n      },\n    ]);\n  });\n  afterEach(async () => {\n    await graph.drop();\n  });\n  describe(\"graph.get\", () => {\n    it(\"should return information about the graph\", async () => {\n      const info = await graph.get();\n      expect(info).to.have.property(\"name\", graphName);\n      expect(info).to.have.property(\"edgeDefinitions\");\n      expect(info.edgeDefinitions).to.be.instanceOf(Array);\n      expect(info.edgeDefinitions.map((e: any) => e.collection)).to.contain(\n        \"knows\"\n      );\n      expect(info.edgeDefinitions.length).to.equal(1);\n      const edgeDefinition = info.edgeDefinitions.filter(\n        (e: any) => e.collection === \"knows\"\n      );\n      expect(\n        [].concat.apply(\n          [],\n          edgeDefinition.map((e: any) => e.from)\n        )\n      ).to.contain(\"person\");\n      expect(\n        [].concat.apply(\n          [],\n          edgeDefinition.map((e: any) => e.to)\n        )\n      ).to.contain(\"person\");\n    });\n  });\n  describe(\"graph.edgeCollections\", () => {\n    it(\"should contain edge collection\", async () => {\n      const info = await graph.edgeCollections();\n      expect(info).to.be.instanceOf(Array);\n      expect(info.map((c: any) => c.name)).to.contain(\"knows\");\n      expect(info.length).to.equal(1);\n    });\n  });\n  describe(\"graph.listEdgeCollections\", () => {\n    it(\"should return all edge collection names\", async () => {\n      const info = await graph.listEdgeCollections();\n      expect(info).to.be.instanceOf(Array);\n      expect(info).to.contain(\"knows\");\n      expect(info.length).to.equal(1);\n    });\n  });\n  describe(\"graph.listVertexCollections\", () => {\n    it(\"should return all vertex collection names\", async () => {\n      const info = await graph.listVertexCollections();\n      expect(info).to.be.instanceOf(Array);\n      expect(info).to.contain(\"person\");\n      expect(info.length).to.equal(1);\n    });\n  });\n  describe(\"graph.addEdgeDefinition\", () => {\n    it(\"should add an edgeDefinition to the graph\", async () => {\n      const info = await graph.addEdgeDefinition({\n        collection: \"works_in\",\n        from: [\"person\"],\n        to: [\"city\"],\n      });\n      expect(info).to.have.property(\"name\", graphName);\n      expect(info).to.have.property(\"edgeDefinitions\");\n      expect(info.edgeDefinitions).to.be.instanceOf(Array);\n      expect(info.edgeDefinitions.map((e: any) => e.collection)).to.contain(\n        \"works_in\"\n      );\n      expect(info.edgeDefinitions.length).to.equal(2);\n      const edgeDefinition = info.edgeDefinitions.filter(\n        (e: any) => e.collection === \"works_in\"\n      );\n      expect(\n        [].concat.apply(\n          [],\n          edgeDefinition.map((e: any) => e.from)\n        )\n      ).to.contain(\"person\");\n      expect(\n        [].concat.apply(\n          [],\n          edgeDefinition.map((e: any) => e.to)\n        )\n      ).to.contain(\"city\");\n    });\n  });\n  describe(\"graph.replaceEdgeDefinition\", () => {\n    it(\"should replace an existing edgeDefinition in the graph\", async () => {\n      const info = await graph.replaceEdgeDefinition(\"knows\", {\n        collection: \"knows\",\n        from: [\"person\"],\n        to: [\"city\"],\n      });\n      expect(info).to.have.property(\"name\", graphName);\n      expect(info).to.have.property(\"edgeDefinitions\");\n      expect(info.edgeDefinitions).to.be.instanceOf(Array);\n      expect(info.edgeDefinitions.map((e: any) => e.collection)).to.contain(\n        \"knows\"\n      );\n      expect(info.edgeDefinitions.length).to.equal(1);\n      const edgeDefinition = info.edgeDefinitions.filter(\n        (e: any) => e.collection === \"knows\"\n      );\n      expect(\n        [].concat.apply(\n          [],\n          edgeDefinition.map((e: any) => e.from)\n        )\n      ).to.contain(\"person\");\n      expect(\n        [].concat.apply(\n          [],\n          edgeDefinition.map((e: any) => e.to)\n        )\n      ).to.contain(\"city\");\n    });\n  });\n  describe(\"graph.removeEdgeDefinition\", () => {\n    it(\"should remove an edgeDefinition from the graph\", async () => {\n      const info = await graph.removeEdgeDefinition(\"knows\");\n      expect(info).to.have.property(\"name\", graphName);\n      expect(info).to.have.property(\"edgeDefinitions\");\n      expect(info.edgeDefinitions).to.be.instanceOf(Array);\n      expect(info.edgeDefinitions.length).to.equal(0);\n    });\n  });\n  describe(\"graph.traversal\", () => {\n    beforeEach(async () => {\n      const knows = graph.edgeCollection(\"knows\");\n      const person = graph.vertexCollection(\"person\");\n      await Promise.all([\n        person.collection.import([\n          { _key: \"Alice\" },\n          { _key: \"Bob\" },\n          { _key: \"Charlie\" },\n          { _key: \"Dave\" },\n          { _key: \"Eve\" },\n        ]),\n        knows.collection.import([\n          { _from: \"person/Alice\", _to: \"person/Bob\" },\n          { _from: \"person/Bob\", _to: \"person/Charlie\" },\n          { _from: \"person/Bob\", _to: \"person/Dave\" },\n          { _from: \"person/Eve\", _to: \"person/Alice\" },\n          { _from: \"person/Eve\", _to: \"person/Bob\" },\n        ]),\n      ]);\n    });\n    it(\"executes traversal\", async () => {\n      const result = await graph.traversal(\"person/Alice\", {\n        direction: \"outbound\",\n      });\n      expect(result).to.have.property(\"visited\");\n      const visited = result.visited;\n      expect(visited).to.have.property(\"vertices\");\n      const vertices = visited.vertices;\n      expect(vertices).to.be.instanceOf(Array);\n      const names = vertices.map((d: any) => d._key);\n      for (const name of [\"Alice\", \"Bob\", \"Charlie\", \"Dave\"]) {\n        expect(names).to.contain(name);\n      }\n      expect(vertices.length).to.equal(4);\n      expect(visited).to.have.property(\"paths\");\n      const paths = visited.paths;\n      expect(paths).to.be.instanceOf(Array);\n      expect(paths.length).to.equal(4);\n    });\n  });\n});\n"]}