{"version":3,"file":"16-graphs.js","sourceRoot":"","sources":["../../src/test/16-graphs.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from \"chai\";\nimport { ArangoCollection } from \"../collection\";\nimport { Database } from \"../database\";\nimport { Graph } from \"../graph\";\n\nconst range = (n: number): number[] => Array.from(Array(n).keys());\n\nconst ARANGO_URL = process.env.TEST_ARANGODB_URL || \"http://localhost:8529\";\nconst ARANGO_VERSION = Number(\n  process.env.ARANGO_VERSION || process.env.ARANGOJS_DEVEL_VERSION || 30400\n);\n\nasync function createCollections(db: Database) {\n  const vertexCollectionNames = range(2).map((i) => `vc_${Date.now()}_${i}`);\n  const edgeCollectionNames = range(2).map((i) => `ec_${Date.now()}_${i}`);\n  await Promise.all([\n    ...vertexCollectionNames.map((name) => db.createCollection(name)),\n    ...edgeCollectionNames.map((name) => db.createEdgeCollection(name)),\n  ] as Promise<ArangoCollection>[]);\n  return [vertexCollectionNames, edgeCollectionNames];\n}\n\nasync function createGraph(\n  graph: Graph,\n  vertexCollectionNames: string[],\n  edgeCollectionNames: string[]\n) {\n  return await graph.create(\n    edgeCollectionNames.map((name) => ({\n      collection: name,\n      from: vertexCollectionNames,\n      to: vertexCollectionNames,\n    }))\n  );\n}\n\ndescribe(\"Graph API\", function () {\n  let db: Database;\n  const name = `testdb_${Date.now()}`;\n  before(async () => {\n    db = new Database({ url: ARANGO_URL, arangoVersion: ARANGO_VERSION });\n    await db.createDatabase(name);\n    db.useDatabase(name);\n  });\n  after(async () => {\n    try {\n      db.useDatabase(\"_system\");\n      await db.dropDatabase(name);\n    } finally {\n      db.close();\n    }\n  });\n  describe(\"graph.get\", () => {\n    let graph: Graph;\n    let collectionNames: string[];\n    before(async () => {\n      graph = db.graph(`g_${Date.now()}`);\n      const names = await createCollections(db);\n      collectionNames = names.reduce((a, b) => a.concat(b));\n      await createGraph(graph, names[0], names[1]);\n    });\n    after(async () => {\n      await graph.drop();\n      await Promise.all(\n        collectionNames.map((name) => db.collection(name).drop())\n      );\n    });\n    it(\"fetches information about the graph\", async () => {\n      const data = await graph.get();\n      expect(data).to.have.property(\"name\", graph.name);\n    });\n  });\n  describe(\"graph.create\", () => {\n    let edgeCollectionNames: string[];\n    let vertexCollectionNames: string[];\n    before(async () => {\n      [vertexCollectionNames, edgeCollectionNames] = await createCollections(\n        db\n      );\n    });\n    after(async () => {\n      await Promise.all(\n        [...edgeCollectionNames, ...vertexCollectionNames].map((name) =>\n          db.collection(name).drop()\n        )\n      );\n    });\n    it(\"creates the graph\", async () => {\n      const graph = db.graph(`g_${Date.now()}`);\n      await graph.create(\n        edgeCollectionNames.map((name) => ({\n          collection: name,\n          from: vertexCollectionNames,\n          to: vertexCollectionNames,\n        }))\n      );\n      const data = await graph.get();\n      expect(data).to.have.property(\"name\", graph.name);\n    });\n  });\n  describe(\"graph.drop\", () => {\n    let graph: Graph;\n    let edgeCollectionNames: string[];\n    let vertexCollectionNames: string[];\n    beforeEach(async () => {\n      graph = db.graph(`g_${Date.now()}`);\n      [vertexCollectionNames, edgeCollectionNames] = await createCollections(\n        db\n      );\n      await createGraph(graph, vertexCollectionNames, edgeCollectionNames);\n    });\n    afterEach(async () => {\n      await Promise.all(\n        [...edgeCollectionNames, ...vertexCollectionNames].map((name) =>\n          db\n            .collection(name)\n            .drop()\n            .catch(() => null)\n        )\n      );\n    });\n    it(\"destroys the graph if not passed true\", async () => {\n      await graph.drop();\n      try {\n        await graph.get();\n      } catch (e) {\n        const collections = await db.listCollections();\n        expect(collections.map((c: any) => c.name)).to.include.members([\n          ...edgeCollectionNames,\n          ...vertexCollectionNames,\n        ]);\n        return;\n      }\n      expect.fail();\n    });\n    it(\"additionally drops all of its collections if passed true\", async () => {\n      await graph.drop(true);\n      try {\n        await graph.get();\n      } catch (e) {\n        const collections = await db.listCollections();\n        expect(collections.map((c: any) => c.name)).not.to.include.members([\n          ...edgeCollectionNames,\n          ...vertexCollectionNames,\n        ]);\n        return;\n      }\n      expect.fail();\n    });\n  });\n});\n"]}