{"version":3,"file":"05-aql-helpers.js","sourceRoot":"","sources":["../../src/test/05-aql-helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from \"chai\";\nimport { aql } from \"../aql\";\nimport { Database } from \"../database\";\n\ndescribe(\"AQL helpers\", function () {\n  describe(\"aql\", () => {\n    const db = new Database();\n    it(\"supports simple parameters\", () => {\n      const values = [\n        0,\n        42,\n        -1,\n        null,\n        true,\n        false,\n        \"\",\n        \"string\",\n        [1, 2, 3],\n        { a: \"b\" },\n      ];\n      const query = aql`A ${values[0]} B ${values[1]} C ${values[2]} D ${values[3]} E ${values[4]} F ${values[5]} G ${values[6]} H ${values[7]} I ${values[8]} J ${values[9]} K EOF`;\n      expect(query.query).to.equal(\n        `A @value0 B @value1 C @value2 D @value3 E @value4 F @value5 G @value6 H @value7 I @value8 J @value9 K EOF`\n      );\n      const bindVarNames = Object.keys(query.bindVars).sort((a, b) =>\n        +a.substr(5) > +b.substr(5) ? 1 : -1\n      );\n      expect(bindVarNames).to.eql([\n        \"value0\",\n        \"value1\",\n        \"value2\",\n        \"value3\",\n        \"value4\",\n        \"value5\",\n        \"value6\",\n        \"value7\",\n        \"value8\",\n        \"value9\",\n      ]);\n      expect(bindVarNames.map((k) => query.bindVars[k])).to.eql(values);\n    });\n    it(\"omits undefined bindvars and empty queries\", () => {\n      const query = aql`A ${undefined} B ${aql``} C ${aql.join(\n        []\n      )} D ${aql.literal(\"\")} E`;\n      expect(query.query).to.equal(\"A  B  C  D  E\");\n      expect(query.bindVars).to.eql({});\n    });\n    it(\"supports arangojs collection parameters\", () => {\n      const collection = db.collection(\"potato\");\n      const query = aql`${collection}`;\n      expect(query.query).to.equal(\"@@value0\");\n      expect(Object.keys(query.bindVars)).to.eql([\"@value0\"]);\n      expect(query.bindVars[\"@value0\"]).to.equal(\"potato\");\n    });\n    it(\"supports arangojs view parameters\", () => {\n      const view = db.view(\"banana\");\n      const query = aql`${view}`;\n      expect(query.query).to.equal(\"@@value0\");\n      expect(Object.keys(query.bindVars)).to.eql([\"@value0\"]);\n      expect(query.bindVars[\"@value0\"]).to.equal(\"banana\");\n    });\n    it(\"supports ArangoDB collection parameters\", () => {\n      class ArangoCollection {\n        isArangoCollection = true;\n        name = \"tomato\";\n      }\n      const collection = new ArangoCollection();\n      const query = aql`${collection}`;\n      expect(query.query).to.equal(\"@@value0\");\n      expect(Object.keys(query.bindVars)).to.eql([\"@value0\"]);\n      expect(query.bindVars[\"@value0\"]).to.equal(\"tomato\");\n    });\n    it(\"supports arbitrary types\", () => {\n      interface Whatever {\n        color: string;\n        more: {\n          x: number;\n        };\n      }\n      const whatever: Whatever[] = [\n        { color: \"green\", more: { x: 2 } },\n        { color: \"yellow\", more: { x: 3 } },\n      ];\n      const query = aql`${whatever}`;\n      expect(query.query).to.equal(\"@value0\");\n      expect(Object.keys(query.bindVars)).to.eql([\"value0\"]);\n      expect(query.bindVars.value0).to.equal(whatever);\n    });\n    it(\"supports arbitrary classes\", () => {\n      class Whatever {\n        color: string;\n        constructor(color: string) {\n          this.color = color;\n        }\n      }\n      const whatever: Whatever[] = [\n        new Whatever(\"green\"),\n        new Whatever(\"yellow\"),\n      ];\n      const query = aql`${whatever}`;\n      expect(query.query).to.equal(\"@value0\");\n      expect(Object.keys(query.bindVars)).to.eql([\"value0\"]);\n      expect(query.bindVars.value0).to.equal(whatever);\n    });\n    it(\"supports AQL literals\", () => {\n      const query = aql`FOR x IN whatever ${aql.literal(\n        \"FILTER x.blah\"\n      )} RETURN x`;\n      expect(query.query).to.equal(\"FOR x IN whatever FILTER x.blah RETURN x\");\n      expect(query.bindVars).to.eql({});\n    });\n    it(\"supports nesting simple queries\", () => {\n      const query = aql`FOR x IN (${aql`FOR a IN 1..3 RETURN a`}) RETURN x`;\n      expect(query.query).to.equal(\n        \"FOR x IN (FOR a IN 1..3 RETURN a) RETURN x\"\n      );\n    });\n    it(\"supports deeply nesting simple queries\", () => {\n      const query = aql`FOR x IN (${aql`FOR a IN (${aql`FOR b IN 1..3 RETURN b`}) RETURN a`}) RETURN x`;\n      expect(query.query).to.equal(\n        \"FOR x IN (FOR a IN (FOR b IN 1..3 RETURN b) RETURN a) RETURN x\"\n      );\n    });\n    it(\"supports nesting with bindVars\", () => {\n      const collection = db.collection(\"paprika\");\n      const query = aql`A ${collection} B ${aql`X ${collection} Y ${aql`J ${collection} K ${9} L`} Z`} C ${4}`;\n      expect(query.query).to.equal(\n        \"A @@value0 B X @@value0 Y J @@value0 K @value1 L Z C @value2\"\n      );\n      expect(query.bindVars).to.eql({\n        \"@value0\": \"paprika\",\n        value1: 9,\n        value2: 4,\n      });\n    });\n    it(\"supports arbitrary nesting\", () => {\n      const users = db.collection(\"users\");\n      const role = \"admin\";\n      const filter = aql`FILTER u.role == ${role}`;\n      const query = aql`FOR u IN ${users} ${filter} RETURN u`;\n      expect(query.query).to.equal(\n        \"FOR u IN @@value0 FILTER u.role == @value1 RETURN u\"\n      );\n      expect(query.bindVars).to.eql({\n        \"@value0\": users.name,\n        value1: role,\n      });\n    });\n    it(\"supports basic nesting\", () => {\n      const query = aql`A ${aql`a ${1} b`} B`;\n      expect(query.query).to.equal(\"A a @value0 b B\");\n      expect(query.bindVars).to.eql({ value0: 1 });\n    });\n    it(\"supports deep nesting\", () => {\n      const query = aql`A ${1} ${aql`a ${2} ${aql`X ${3} ${aql`x ${4} y`} ${5} Y`} ${6} b`} ${7} B`;\n      expect(query.query).to.equal(\n        \"A @value0 a @value1 X @value2 x @value3 y @value4 Y @value5 b @value6 B\"\n      );\n      expect(query.bindVars).to.eql({\n        value0: 1,\n        value1: 2,\n        value2: 3,\n        value3: 4,\n        value4: 5,\n        value5: 6,\n        value6: 7,\n      });\n    });\n    it(\"supports nesting without bindvars\", () => {\n      const query = aql`A ${aql`B`} C`;\n      expect(query.query).to.equal(\"A B C\");\n      expect(query.bindVars).to.eql({});\n    });\n  });\n  describe(\"aql.literal\", () => {\n    const pairs = [\n      [0, \"0\"],\n      [42, \"42\"],\n      [-1, \"-1\"],\n      [undefined, \"\"],\n      [null, \"null\"],\n      [true, \"true\"],\n      [false, \"false\"],\n      [\"\", \"\"],\n      [\"string\", \"string\"],\n    ];\n    for (const [value, result] of pairs) {\n      it(`returns an AQL literal of \"${result}\" for ${String(\n        JSON.stringify(value)\n      )}`, () => {\n        expect(aql.literal(value).toAQL()).to.equal(result);\n      });\n    }\n    it('returns an AQL literal of \"aql\" for { toAQL: () => \"aql\" }', () => {\n      expect(aql.literal({ toAQL: () => \"aql\" }).toAQL()).to.equal(\"aql\");\n    });\n  });\n  describe(\"aql.join\", () => {\n    const fragments = [aql`x ${1}`, aql`y ${2}`, aql`z ${3}`];\n    it(\"merges fragments with a space by default\", () => {\n      const query = aql.join(fragments);\n      expect(query.query).to.equal(\"x @value0 y @value1 z @value2\");\n      expect(query.bindVars).to.eql({ value0: 1, value1: 2, value2: 3 });\n    });\n    it(\"merges fragments with an empty string\", () => {\n      const query = aql.join(fragments, \"\");\n      expect(query.query).to.equal(\"x @value0y @value1z @value2\");\n      expect(query.bindVars).to.eql({ value0: 1, value1: 2, value2: 3 });\n    });\n    it(\"merges fragments with an arbitrary string\", () => {\n      const query = aql.join(fragments, \"abc\");\n      expect(query.query).to.equal(\"x @value0abcy @value1abcz @value2\");\n      expect(query.bindVars).to.eql({ value0: 1, value1: 2, value2: 3 });\n    });\n    it(\"merges anything\", () => {\n      const query = aql.join([1, true, \"yes\", aql.literal(\"test\")]);\n      expect(query.query).to.equal(\"@value0 @value1 @value2 test\");\n      expect(query.bindVars).to.eql({ value0: 1, value1: true, value2: \"yes\" });\n    });\n  });\n});\n"]}