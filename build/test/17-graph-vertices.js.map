{"version":3,"file":"17-graph-vertices.js","sourceRoot":"","sources":["../../src/test/17-graph-vertices.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from \"chai\";\nimport { ArangoCollection, DocumentCollection } from \"../collection\";\nimport { Database } from \"../database\";\nimport { ArangoError } from \"../error\";\nimport { Graph, GraphVertexCollection } from \"../graph\";\n\nconst range = (n: number): number[] => Array.from(Array(n).keys());\n\nconst ARANGO_URL = process.env.TEST_ARANGODB_URL || \"http://localhost:8529\";\nconst ARANGO_VERSION = Number(\n  process.env.ARANGO_VERSION || process.env.ARANGOJS_DEVEL_VERSION || 30400\n);\n\nasync function createCollections(db: Database) {\n  const vertexCollectionNames = range(2).map((i) => `vc_${Date.now()}_${i}`);\n  const edgeCollectionNames = range(2).map((i) => `ec_${Date.now()}_${i}`);\n  await Promise.all([\n    ...vertexCollectionNames.map((name) => db.createCollection(name)),\n    ...edgeCollectionNames.map((name) => db.createEdgeCollection(name)),\n  ] as Promise<ArangoCollection>[]);\n  return [vertexCollectionNames, edgeCollectionNames];\n}\n\nasync function createGraph(\n  graph: Graph,\n  vertexCollectionNames: string[],\n  edgeCollectionNames: string[]\n) {\n  return await graph.create(\n    edgeCollectionNames.map((name) => ({\n      collection: name,\n      from: vertexCollectionNames,\n      to: vertexCollectionNames,\n    }))\n  );\n}\n\ndescribe(\"Manipulating graph vertices\", function () {\n  const name = `testdb_${Date.now()}`;\n  let db: Database;\n  let graph: Graph;\n  let collectionNames: string[];\n  before(async () => {\n    db = new Database({ url: ARANGO_URL, arangoVersion: ARANGO_VERSION });\n    await db.createDatabase(name);\n    db.useDatabase(name);\n  });\n  after(async () => {\n    try {\n      db.useDatabase(\"_system\");\n      await db.dropDatabase(name);\n    } finally {\n      db.close();\n    }\n  });\n  beforeEach(async () => {\n    graph = db.graph(`g_${Date.now()}`);\n    const names = await createCollections(db);\n    collectionNames = names.reduce((a, b) => a.concat(b));\n    await createGraph(graph, names[0], names[1]);\n  });\n  afterEach(async () => {\n    await graph.drop();\n    await Promise.all(\n      collectionNames.map((name) => db.collection(name).drop())\n    );\n  });\n  describe(\"graph.vertexCollection\", () => {\n    it(\"returns a GraphVertexCollection instance for the collection\", () => {\n      const name = \"potato\";\n      const collection = graph.vertexCollection(name);\n      expect(collection).to.be.an.instanceof(GraphVertexCollection);\n      expect(collection).to.have.property(\"name\").that.equals(name);\n    });\n  });\n  describe(\"graph.addVertexCollection\", () => {\n    let vertexCollection: DocumentCollection;\n    beforeEach(async () => {\n      vertexCollection = await db.createCollection(`xc_${Date.now()}`);\n    });\n    afterEach(async () => {\n      await vertexCollection.drop();\n    });\n    it(\"adds the given vertex collection to the graph\", async () => {\n      const data = await graph.addVertexCollection(vertexCollection.name);\n      expect(data.orphanCollections).to.contain(vertexCollection.name);\n    });\n  });\n  describe(\"graph.removeVertexCollection\", () => {\n    let vertexCollection: DocumentCollection;\n    beforeEach(async () => {\n      vertexCollection = await db.createCollection(`xc_${Date.now()}`);\n      await graph.addVertexCollection(vertexCollection.name);\n    });\n    it(\"removes the given vertex collection from the graph\", async () => {\n      const data = await graph.removeVertexCollection(vertexCollection.name);\n      expect(data.orphanCollections).not.to.contain(vertexCollection.name);\n      await vertexCollection.get();\n    });\n    it(\"destroys the collection if explicitly passed true\", async () => {\n      const data = await graph.removeVertexCollection(\n        vertexCollection.name,\n        true\n      );\n      expect(data.orphanCollections).not.to.contain(vertexCollection.name);\n      try {\n        await vertexCollection.get();\n      } catch (err) {\n        expect(err).to.be.an.instanceof(ArangoError);\n        return;\n      }\n      expect.fail();\n    });\n  });\n});\n"]}