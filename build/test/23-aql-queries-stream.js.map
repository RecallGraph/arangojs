{"version":3,"file":"23-aql-queries-stream.js","sourceRoot":"","sources":["../../src/test/23-aql-queries-stream.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from \"chai\";\nimport { aql } from \"../aql\";\nimport { ArrayCursor } from \"../cursor\";\nimport { Database } from \"../database\";\n\nconst ARANGO_URL = process.env.TEST_ARANGODB_URL || \"http://localhost:8529\";\nconst ARANGO_VERSION = Number(\n  process.env.ARANGO_VERSION || process.env.ARANGOJS_DEVEL_VERSION || 30400\n);\nconst describe34 = ARANGO_VERSION >= 30400 ? describe : describe.skip;\nconst itRdb = process.env.ARANGO_STORAGE_ENGINE !== \"mmfiles\" ? it : it.skip;\n\ndescribe34(\"AQL Stream queries\", function () {\n  let name = `testdb_${Date.now()}`;\n  let db: Database;\n  before(async () => {\n    db = new Database({ url: ARANGO_URL, arangoVersion: ARANGO_VERSION });\n    await db.createDatabase(name);\n    db.useDatabase(name);\n  });\n  after(async () => {\n    try {\n      db.useDatabase(\"_system\");\n      await db.dropDatabase(name);\n    } finally {\n      db.close();\n    }\n  });\n  describe(\"database.query\", () => {\n    it(\"returns a cursor for the query result\", async () => {\n      const cursor = await db.query(\"RETURN 23\", {}, { stream: true });\n      expect(cursor).to.be.an.instanceof(ArrayCursor);\n    });\n    it(\"supports bindVars\", async () => {\n      const cursor = await db.query(\"RETURN @x\", { x: 5 }, { stream: true });\n      const value = await cursor.next();\n      expect(value).to.equal(5);\n    });\n    it(\"supports options\", async () => {\n      const cursor = await db.query(\"FOR x IN 1..10 RETURN x\", undefined, {\n        batchSize: 2,\n        count: true, // should be ignored\n        stream: true,\n      });\n      expect(cursor.count).to.equal(undefined);\n      expect((cursor as any).batches.hasMore).to.equal(true);\n    });\n    it(\"supports compact queries with options\", async () => {\n      let query: any = {\n        query: \"FOR x IN RANGE(1, @max) RETURN x\",\n        bindVars: { max: 10 },\n      };\n      const cursor = await db.query(query, {\n        batchSize: 2,\n        count: true,\n        stream: true,\n      });\n      expect(cursor.count).to.equal(undefined); // count will be ignored\n      expect((cursor as any).batches.hasMore).to.equal(true);\n    });\n  });\n  describe(\"with some data\", () => {\n    let cname = \"MyTestCollection\";\n    before(async () => {\n      let collection = await db.createCollection(cname);\n      await Promise.all(\n        Array.from(Array(1000).keys()).map((i: number) =>\n          collection.save({ hallo: i })\n        )\n      );\n    });\n    /*after(async () => {\n      await db.collection(cname).drop()\n    });*/\n    it(\"can access large collection in parallel\", async () => {\n      let collection = db.collection(cname);\n      let query = aql`FOR doc in ${collection} RETURN doc`;\n      const options = { batchSize: 250, stream: true };\n\n      let count = 0;\n      const cursors = await Promise.all(\n        Array.from(Array(25)).map(() => db.query(query, options))\n      );\n      await Promise.all(\n        cursors.map((c) =>\n          (c as ArrayCursor).forEach(() => {\n            count++;\n          })\n        )\n      );\n      expect(count).to.equal(25 * 1000);\n    });\n    itRdb(\"can do writes and reads\", async () => {\n      let collection = db.collection(cname);\n      let readQ = aql`FOR doc in ${collection} RETURN doc`;\n      let writeQ = aql`FOR i in 1..1000 LET y = SLEEP(1) INSERT {forbidden: i} INTO ${collection}`;\n      const options = { batchSize: 500, ttl: 5, stream: true };\n\n      // 900s lock timeout + 5s ttl\n      let readCursor = db.query(readQ, options);\n      let writeCursor = db.query(writeQ, options);\n\n      // the read cursor should always win\n      const c = await Promise.race([readCursor, writeCursor]);\n      // therefore no document should have been written here\n      for await (const d of c) {\n        expect(d).not.to.haveOwnProperty(\"forbidden\");\n      }\n    });\n  });\n});\n"]}