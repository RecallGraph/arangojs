{"version":3,"file":"99-load-balancing.js","sourceRoot":"","sources":["../../src/test/99-load-balancing.ts"],"names":[],"mappings":"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","sourcesContent":["import Instance from \"arangodb-instance-manager/lib/Instance\";\nimport InstanceManager from \"arangodb-instance-manager/lib/InstanceManager\";\nimport { expect } from \"chai\";\nimport { DocumentCollection } from \"../collection\";\nimport { Connection } from \"../connection\";\nimport { Database } from \"../database\";\n\nconst sleep = (timeout: number) =>\n  new Promise((resolve) => setTimeout(resolve, timeout));\n\nlet ARANGO_PATH: string;\nlet ARANGO_RUNNER: \"local\" | \"docker\";\nif (process.env.RESILIENCE_ARANGO_BASEPATH) {\n  ARANGO_PATH = process.env.RESILIENCE_ARANGO_BASEPATH;\n  ARANGO_RUNNER = \"local\";\n} else if (process.env.RESILIENCE_DOCKER_IMAGE) {\n  ARANGO_PATH = process.env.RESILIENCE_DOCKER_IMAGE;\n  ARANGO_RUNNER = \"docker\";\n}\nconst describeIm = ARANGO_PATH! ? describe.only : describe.skip;\n\ndescribeIm(\"Single-server active failover\", function () {\n  this.timeout(Infinity);\n  let im: InstanceManager;\n  let uuid: string;\n  let leader: Instance;\n  let db: Database;\n  let conn: Connection;\n  beforeEach(async () => {\n    im = new InstanceManager(ARANGO_PATH, ARANGO_RUNNER, \"rocksdb\");\n    await im.startAgency();\n    await im.startSingleServer(\"arangojs\", 2);\n    await im.waitForAllInstances();\n    uuid = await im.asyncReplicationLeaderSelected();\n    leader = (await im.resolveUUID(uuid))!;\n    db = new Database({ url: leader.endpoint });\n    conn = (db as any)._connection;\n    await db.acquireHostList();\n  });\n  afterEach(async function () {\n    im.moveServerLogs(this.currentTest);\n    const logs = await im.cleanup(this.currentTest!.isFailed());\n    if (logs) console.error(`IM Logs:\\n${logs}`);\n  });\n  async function getServerId(): Promise<string | undefined> {\n    const res = await db.route(\"_api/replication/server-id\").get();\n    return res.body.serverId;\n  }\n  async function responseHeaders() {\n    const res = await db.route(\"_api/version\").get();\n    return res.headers;\n  }\n  it(\"failover to follower if leader is down\", async () => {\n    expect((conn as any)._urls).to.have.lengthOf(2);\n    (conn as any)._activeHost = 0;\n    const leaderId = await getServerId();\n    expect(leaderId).not.to.be.empty;\n    const headers = await responseHeaders();\n    expect(headers).not.to.include.keys(\"x-arango-endpoint\");\n\n    await im.kill(leader);\n    await im.asyncReplicationLeaderSelected(uuid as any);\n    await sleep(3000);\n    await db.version(); // cycle\n\n    const newLeaderId = await getServerId();\n    expect(newLeaderId).not.to.be.empty;\n    expect(newLeaderId).not.to.equal(leaderId);\n    const newHeaders = await responseHeaders();\n    expect(newHeaders).not.to.include.keys(\"x-arango-endpoint\");\n  });\n  it(\"redirect to leader if server is not leader\", async () => {\n    expect((conn as any)._urls).to.have.lengthOf(2);\n    (conn as any)._activeHost = 1;\n    const followerId = await getServerId();\n    expect(followerId).not.to.be.empty;\n    const headers = await responseHeaders();\n    expect(headers).to.include.keys(\"x-arango-endpoint\");\n\n    await im.kill(leader);\n    await im.asyncReplicationLeaderSelected(uuid as any);\n    await sleep(3000);\n\n    const newLeaderId = await getServerId();\n    expect(newLeaderId).not.to.be.empty;\n    expect(newLeaderId).to.equal(followerId);\n    const newHeaders = await responseHeaders();\n    expect(newHeaders).not.to.include.keys(\"x-arango-endpoint\");\n  });\n});\n\ndescribeIm(\"Single-server with follower\", function () {\n  this.timeout(Infinity);\n  let im: InstanceManager;\n  let leader: Instance;\n  let db: Database;\n  let conn: Connection;\n  let collection: DocumentCollection;\n  beforeEach(async () => {\n    im = new InstanceManager(ARANGO_PATH, ARANGO_RUNNER);\n    await im.startAgency();\n    await im.startSingleServer(\"arangojs\", 2);\n    await im.waitForAllInstances();\n    leader = await im.asyncReplicationLeaderInstance();\n    db = new Database({ url: leader.endpoint });\n    conn = (db as any)._connection;\n    await db.acquireHostList();\n    collection = await db.createCollection(\"test\");\n    await collection.save({ _key: \"abc\" });\n    await sleep(3000);\n  });\n  afterEach(async () => {\n    await collection.drop();\n    await sleep(3000);\n    await im.cleanup();\n  });\n  async function getResponse(dirty?: boolean) {\n    return await conn.request({\n      method: \"GET\",\n      path: \"/_api/document/test/abc\",\n      allowDirtyRead: dirty,\n    });\n  }\n  it(\"supports dirty reads\", async () => {\n    expect((conn as any)._urls).to.have.lengthOf(2);\n    const res1 = await getResponse(true);\n    expect(res1.arangojsHostId).to.be.a(\"number\");\n    const headers1 = res1.request.getHeaders();\n    expect(headers1).to.include.keys(\"x-arango-allow-dirty-read\");\n    const res2 = await getResponse(true);\n    expect(res2.arangojsHostId).to.be.a(\"number\");\n    expect(res2.arangojsHostId).not.to.equal(res1.arangojsHostId);\n    const headers2 = res2.request.getHeaders();\n    expect(headers2).to.include.keys(\"x-arango-allow-dirty-read\");\n  });\n  it(\"supports non-dirty reads\", async () => {\n    expect((conn as any)._urls).to.have.lengthOf(2);\n    const res1 = await getResponse();\n    expect(res1.arangojsHostId).to.be.a(\"number\");\n    const headers1 = res1.request.getHeaders();\n    expect(headers1).not.to.include.keys(\"x-arango-allow-dirty-read\");\n    const res2 = await getResponse();\n    expect(res2.arangojsHostId).to.be.a(\"number\");\n    expect(res2.arangojsHostId).to.equal(res1.arangojsHostId);\n    const headers2 = res2.request.getHeaders();\n    expect(headers2).not.to.include.keys(\"x-arango-allow-dirty-read\");\n  });\n  it(\"supports dirty read over multiple cursor batches\", async () => {\n    const cursor = await db.query(\n      \"FOR i IN 1..2 RETURN i\",\n      {},\n      {\n        allowDirtyRead: true,\n        batchSize: 1,\n      }\n    );\n    expect(cursor.hasNext).to.equal(true);\n    expect(await cursor.next()).to.equal(1);\n    expect(cursor.hasNext).to.equal(true);\n    expect(await cursor.next()).to.equal(2);\n  });\n});\n\ndescribeIm(\"Cluster round robin\", function () {\n  this.timeout(Infinity);\n  const NUM_COORDINATORS = 3;\n  let im: InstanceManager;\n  let db: Database;\n  let conn: Connection;\n  beforeEach(async () => {\n    im = new InstanceManager(ARANGO_PATH, ARANGO_RUNNER);\n    const endpoint = await im.startCluster(1, NUM_COORDINATORS, 2);\n    db = new Database({\n      url: endpoint,\n      loadBalancingStrategy: \"ROUND_ROBIN\",\n    });\n    conn = (db as any)._connection;\n    await db.acquireHostList();\n  });\n  afterEach(async () => {\n    await im.cleanup();\n  });\n  async function getServerId(): Promise<string | undefined> {\n    const res = await db.route(\"_admin/status\").get();\n    return res.body.serverInfo && res.body.serverInfo.serverId;\n  }\n  it(\"cycles servers\", async () => {\n    expect((conn as any)._urls).to.have.lengthOf(NUM_COORDINATORS);\n    const serverIds = new Set<string>();\n    for (let i = 0; i < NUM_COORDINATORS; i++) {\n      const serverId = await getServerId();\n      expect(serverId).not.to.be.empty;\n      expect(serverIds).not.to.include(serverId!);\n      serverIds.add(serverId!);\n    }\n\n    expect(serverIds.size).to.equal(NUM_COORDINATORS);\n    for (const serverId of serverIds) {\n      const secondId = await getServerId();\n      expect(secondId).to.equal(serverId);\n    }\n  });\n  it(\"skips downed servers\", async () => {\n    expect((conn as any)._urls).to.have.lengthOf(NUM_COORDINATORS);\n    const firstRun = new Set<string>();\n    for (let i = 0; i < NUM_COORDINATORS; i++) {\n      const serverId = await getServerId();\n      expect(serverId).not.to.be.empty;\n      firstRun.add(serverId!);\n    }\n\n    const instance = im.coordinators()[0];\n    expect(instance.status).to.equal(\"RUNNING\");\n    await im.shutdown(instance);\n    expect(instance.status).not.to.equal(\"RUNNING\");\n\n    const secondRun = new Set<string>();\n    for (let i = 0; i < NUM_COORDINATORS; i++) {\n      const serverId = await getServerId();\n      expect(serverId).not.to.be.empty;\n      secondRun.add(serverId!);\n    }\n    expect(firstRun.size - secondRun.size).to.equal(1);\n  });\n  it(\"it picks up restarted servers\", async () => {\n    expect((conn as any)._urls).to.have.lengthOf(NUM_COORDINATORS);\n    const firstRun = new Set<string>();\n    for (let i = 0; i < NUM_COORDINATORS; i++) {\n      const serverId = await getServerId();\n      expect(serverId).not.to.be.empty;\n      firstRun.add(serverId!);\n    }\n\n    const instance = im.coordinators()[0];\n    expect(instance.status).to.equal(\"RUNNING\");\n    await im.shutdown(instance);\n    expect(instance.status).not.to.equal(\"RUNNING\");\n    for (let i = 0; i < NUM_COORDINATORS; i++) {\n      await getServerId();\n    }\n    await im.restart(instance);\n    expect(instance.status).to.equal(\"RUNNING\");\n\n    const secondRun = new Set<string>();\n    for (let i = 0; i < NUM_COORDINATORS; i++) {\n      const serverId = await getServerId();\n      expect(serverId).not.to.be.empty;\n      secondRun.add(serverId!);\n    }\n    expect(firstRun.size).to.equal(secondRun.size);\n  });\n  it(\"treats cursors as sticky\", async () => {\n    expect((conn as any)._urls).to.have.lengthOf(NUM_COORDINATORS);\n    const LENGTH = 2;\n    const cursor = await db.query(\n      `FOR i IN 1..${LENGTH} RETURN i`,\n      {},\n      { batchSize: 1 }\n    );\n    const result = [];\n    while (cursor.hasNext) {\n      result.push(await cursor.next());\n    }\n    expect(result).to.have.lengthOf(LENGTH);\n  });\n});\n"]}