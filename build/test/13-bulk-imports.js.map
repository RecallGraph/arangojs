{"version":3,"file":"13-bulk-imports.js","sourceRoot":"","sources":["../../src/test/13-bulk-imports.ts"],"names":[],"mappings":";;AAAA,+BAA8B;AAE9B,0CAAuC;AAEvC,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI,uBAAuB,CAAC;AAC5E,MAAM,cAAc,GAAG,MAAM,CAC3B,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,OAAO,CAAC,GAAG,CAAC,sBAAsB,IAAI,KAAK,CAC1E,CAAC;AAEF,QAAQ,CAAC,cAAc,EAAE;IACvB,IAAI,EAAY,CAAC;IACjB,IAAI,MAAM,GAAG,UAAU,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;IACpC,IAAI,UAAgD,CAAC;IACrD,IAAI,cAAc,GAAG,cAAc,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;IAChD,MAAM,CAAC,KAAK,IAAI,EAAE;QAChB,EAAE,GAAG,IAAI,mBAAQ,CAAC,EAAE,GAAG,EAAE,UAAU,EAAE,aAAa,EAAE,cAAc,EAAE,CAAC,CAAC;QACtE,MAAM,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAChC,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACvB,UAAU,GAAG,MAAM,EAAE,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IACH,KAAK,CAAC,KAAK,IAAI,EAAE;QACf,IAAI;YACF,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YAC1B,MAAM,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;SAC/B;gBAAS;YACR,EAAE,CAAC,KAAK,EAAE,CAAC;SACZ;IACH,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;YAC5B,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;gBAC1C,MAAM,IAAI,GAAG;oBACX,CAAC,MAAM,EAAE,MAAM,CAAC;oBAChB,CAAC,KAAK,EAAE,QAAQ,CAAC;oBACjB,CAAC,KAAK,EAAE,OAAO,CAAC;oBAChB,CAAC,KAAK,EAAE,SAAS,CAAC;iBACnB,CAAC;gBACF,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC3C,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;oBAClB,KAAK,EAAE,KAAK;oBACZ,OAAO,EAAE,CAAC;oBACV,MAAM,EAAE,CAAC;oBACT,KAAK,EAAE,CAAC;oBACR,OAAO,EAAE,CAAC;oBACV,OAAO,EAAE,CAAC;iBACX,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YACH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;gBAC7C,MAAM,IAAI,GAAG;oBACX,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE;oBAC/B,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE;oBAC9B,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE;iBACjC,CAAC;gBACF,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC3C,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;oBAClB,KAAK,EAAE,KAAK;oBACZ,OAAO,EAAE,CAAC;oBACV,MAAM,EAAE,CAAC;oBACT,KAAK,EAAE,CAAC;oBACR,OAAO,EAAE,CAAC;oBACV,OAAO,EAAE,CAAC;iBACX,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YACH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;gBACrD,MAAM,IAAI,GACR,qFAAqF,CAAC;gBACxF,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC3C,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;oBAClB,KAAK,EAAE,KAAK;oBACZ,OAAO,EAAE,CAAC;oBACV,MAAM,EAAE,CAAC;oBACT,KAAK,EAAE,CAAC;oBACR,OAAO,EAAE,CAAC;oBACV,OAAO,EAAE,CAAC;iBACX,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YACH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;gBACrD,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CACtB,qFAAqF,CACtF,CAAC;gBACF,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC3C,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;oBAClB,KAAK,EAAE,KAAK;oBACZ,OAAO,EAAE,CAAC;oBACV,MAAM,EAAE,CAAC;oBACT,KAAK,EAAE,CAAC;oBACR,OAAO,EAAE,CAAC;oBACV,OAAO,EAAE,CAAC;iBACX,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,KAAK,MAAM,IAAI,IAAI,CAAC,MAAM,EAAE,WAAW,CAA6B,EAAE;YACpE,QAAQ,CAAC,aAAa,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE;gBACjD,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;oBACxD,MAAM,IAAI,GAAG,iBAAiB,IAAI,yCAAyC,IAAI,wCAAwC,IAAI,2BAA2B,CAAC;oBACvJ,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;oBACrD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;wBAClB,KAAK,EAAE,KAAK;wBACZ,OAAO,EAAE,CAAC;wBACV,MAAM,EAAE,CAAC;wBACT,KAAK,EAAE,CAAC;wBACR,OAAO,EAAE,CAAC;wBACV,OAAO,EAAE,CAAC;qBACX,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;oBACxD,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CACtB,iBAAiB,IAAI,yCAAyC,IAAI,wCAAwC,IAAI,2BAA2B,CAC1I,CAAC;oBACF,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;oBACrD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;wBAClB,KAAK,EAAE,KAAK;wBACZ,OAAO,EAAE,CAAC;wBACV,MAAM,EAAE,CAAC;wBACT,KAAK,EAAE,CAAC;wBACR,OAAO,EAAE,CAAC;wBACV,OAAO,EAAE,CAAC;qBACX,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;SACJ;QACD,KAAK,MAAM,IAAI,IAAI,CAAC,MAAM,EAAE,MAAM,CAAwB,EAAE;YAC1D,QAAQ,CAAC,aAAa,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,EAAE;gBACjD,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;oBAC5D,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;wBAC1B,EAAE,IAAI,EAAE,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;wBAC/C,EAAE,IAAI,EAAE,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE;wBAC9C,EAAE,IAAI,EAAE,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;qBACjD,CAAC,CAAC;oBACH,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;oBACrD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;wBAClB,KAAK,EAAE,KAAK;wBACZ,OAAO,EAAE,CAAC;wBACV,MAAM,EAAE,CAAC;wBACT,KAAK,EAAE,CAAC;wBACR,OAAO,EAAE,CAAC;wBACV,OAAO,EAAE,CAAC;qBACX,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;gBACH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;oBAC5D,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CACtB,IAAI,CAAC,SAAS,CAAC;wBACb,EAAE,IAAI,EAAE,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;wBAC/C,EAAE,IAAI,EAAE,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE;wBAC9C,EAAE,IAAI,EAAE,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;qBACjD,CAAC,CACH,CAAC;oBACF,MAAM,IAAI,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;oBACrD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC;wBAClB,KAAK,EAAE,KAAK;wBACZ,OAAO,EAAE,CAAC;wBACV,MAAM,EAAE,CAAC;wBACT,KAAK,EAAE,CAAC;wBACR,OAAO,EAAE,CAAC;wBACV,OAAO,EAAE,CAAC;qBACX,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;SACJ;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { expect } from \"chai\";\nimport { DocumentCollection } from \"../collection\";\nimport { Database } from \"../database\";\n\nconst ARANGO_URL = process.env.TEST_ARANGODB_URL || \"http://localhost:8529\";\nconst ARANGO_VERSION = Number(\n  process.env.ARANGO_VERSION || process.env.ARANGOJS_DEVEL_VERSION || 30400\n);\n\ndescribe(\"Bulk imports\", function () {\n  let db: Database;\n  let dbName = `testdb_${Date.now()}`;\n  let collection: DocumentCollection<{ data: string }>;\n  let collectionName = `collection-${Date.now()}`;\n  before(async () => {\n    db = new Database({ url: ARANGO_URL, arangoVersion: ARANGO_VERSION });\n    await db.createDatabase(dbName);\n    db.useDatabase(dbName);\n    collection = await db.createCollection(collectionName);\n  });\n  after(async () => {\n    try {\n      db.useDatabase(\"_system\");\n      await db.dropDatabase(dbName);\n    } finally {\n      db.close();\n    }\n  });\n  describe(\"collection.import\", () => {\n    describe(\"without type\", () => {\n      it(\"should accept tuples array\", async () => {\n        const data = [\n          [\"_key\", \"data\"],\n          [\"ta1\", \"banana\"],\n          [\"ta2\", \"peach\"],\n          [\"ta3\", \"apricot\"],\n        ];\n        const info = await collection.import(data);\n        expect(info).to.eql({\n          error: false,\n          created: 3,\n          errors: 0,\n          empty: 0,\n          updated: 0,\n          ignored: 0,\n        });\n      });\n      it(\"should accept documents array\", async () => {\n        const data = [\n          { _key: \"da1\", data: \"banana\" },\n          { _key: \"da2\", data: \"peach\" },\n          { _key: \"da3\", data: \"apricot\" },\n        ];\n        const info = await collection.import(data);\n        expect(info).to.eql({\n          error: false,\n          created: 3,\n          errors: 0,\n          empty: 0,\n          updated: 0,\n          ignored: 0,\n        });\n      });\n      it(\"should accept string of LDJSON arrays\", async () => {\n        const data =\n          '[\"_key\", \"data\"]\\r\\n[\"ts1\", \"banana\"]\\r\\n[\"ts2\", \"peach\"]\\r\\n[\"ts3\", \"apricot\"]\\r\\n';\n        const info = await collection.import(data);\n        expect(info).to.eql({\n          error: false,\n          created: 3,\n          errors: 0,\n          empty: 0,\n          updated: 0,\n          ignored: 0,\n        });\n      });\n      it(\"should accept buffer of LDJSON arrays\", async () => {\n        const data = Buffer.from(\n          '[\"_key\", \"data\"]\\r\\n[\"tb1\", \"banana\"]\\r\\n[\"tb2\", \"peach\"]\\r\\n[\"tb3\", \"apricot\"]\\r\\n'\n        );\n        const info = await collection.import(data);\n        expect(info).to.eql({\n          error: false,\n          created: 3,\n          errors: 0,\n          empty: 0,\n          updated: 0,\n          ignored: 0,\n        });\n      });\n    });\n    for (const type of [\"auto\", \"documents\"] as (\"auto\" | \"documents\")[]) {\n      describe(`with type ${JSON.stringify(type)}`, () => {\n        it(\"should accept string of LDJSON documents\", async () => {\n          const data = `{\"_key\": \"ds1-${type}\", \"data\": \"banana\"}\\r\\n{\"_key\": \"ds2-${type}\", \"data\": \"peach\"}\\r\\n{\"_key\": \"ds3-${type}\", \"data\": \"apricot\"}\\r\\n`;\n          const info = await collection.import(data, { type });\n          expect(info).to.eql({\n            error: false,\n            created: 3,\n            errors: 0,\n            empty: 0,\n            updated: 0,\n            ignored: 0,\n          });\n        });\n        it(\"should accept buffer of LDJSON documents\", async () => {\n          const data = Buffer.from(\n            `{\"_key\": \"db1-${type}\", \"data\": \"banana\"}\\r\\n{\"_key\": \"db2-${type}\", \"data\": \"peach\"}\\r\\n{\"_key\": \"db3-${type}\", \"data\": \"apricot\"}\\r\\n`\n          );\n          const info = await collection.import(data, { type });\n          expect(info).to.eql({\n            error: false,\n            created: 3,\n            errors: 0,\n            empty: 0,\n            updated: 0,\n            ignored: 0,\n          });\n        });\n      });\n    }\n    for (const type of [\"auto\", \"list\"] as (\"auto\" | \"list\")[]) {\n      describe(`with type ${JSON.stringify(type)}`, () => {\n        it(\"should accept string of JSON documents array\", async () => {\n          const data = JSON.stringify([\n            { _key: `js1-${String(type)}`, data: \"banana\" },\n            { _key: `js2-${String(type)}`, data: \"peach\" },\n            { _key: `js3-${String(type)}`, data: \"apricot\" },\n          ]);\n          const info = await collection.import(data, { type });\n          expect(info).to.eql({\n            error: false,\n            created: 3,\n            errors: 0,\n            empty: 0,\n            updated: 0,\n            ignored: 0,\n          });\n        });\n        it(\"should accept buffer of JSON documents array\", async () => {\n          const data = Buffer.from(\n            JSON.stringify([\n              { _key: `jb1-${String(type)}`, data: \"banana\" },\n              { _key: `jb2-${String(type)}`, data: \"peach\" },\n              { _key: `jb3-${String(type)}`, data: \"apricot\" },\n            ])\n          );\n          const info = await collection.import(data, { type });\n          expect(info).to.eql({\n            error: false,\n            created: 3,\n            errors: 0,\n            empty: 0,\n            updated: 0,\n            ignored: 0,\n          });\n        });\n      });\n    }\n  });\n});\n"]}