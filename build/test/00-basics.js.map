{"version":3,"file":"00-basics.js","sourceRoot":"","sources":["../../src/test/00-basics.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from \"chai\";\nimport * as http from \"http\";\nimport * as https from \"https\";\nimport arangojs, { Database } from \"..\";\n\ndescribe(\"Creating a Database\", () => {\n  describe(\"using the factory\", () => {\n    const db = arangojs({ arangoVersion: 54321 });\n    it(\"returns a Database instance\", () => {\n      expect(db).to.be.an.instanceof(Database);\n    });\n    it(\"passes any configs to the connection\", () => {\n      expect((db as any)._connection).to.have.property(\"_arangoVersion\", 54321);\n    });\n  });\n  describe(\"using the constructor\", () => {\n    const db = new Database({ arangoVersion: 43210 });\n    it(\"returns a Database instance\", () => {\n      expect(db).to.be.an.instanceof(Database);\n    });\n    it(\"passes any configs to the connection\", () => {\n      expect((db as any)._connection).to.have.property(\"_arangoVersion\", 43210);\n    });\n  });\n});\n\ndescribe(\"Configuring the driver\", () => {\n  describe.skip(\"with a string\", () => {\n    it(\"sets the url\", () => {\n      const url = \"https://example.com:9000\";\n      const db = new Database(url);\n      expect((db as any)._connection._url).to.eql([url]);\n    });\n  });\n  describe(\"with headers\", () => {\n    it(\"applies the headers\", (done) => {\n      const db = new Database({\n        headers: {\n          \"x-one\": \"1\",\n          \"x-two\": \"2\",\n        },\n      });\n      (db as any)._connection._hosts = [\n        ({ headers }: any) => {\n          expect(headers).to.have.property(\"x-one\", \"1\");\n          expect(headers).to.have.property(\"x-two\", \"2\");\n          done();\n        },\n      ];\n      db.request({ headers: {} }, () => {});\n    });\n  });\n  describe(\"with an arangoVersion\", () => {\n    it(\"sets the x-arango-version header\", (done) => {\n      const db = new Database({ arangoVersion: 99999 });\n      (db as any)._connection._hosts = [\n        ({ headers }: any) => {\n          expect(headers).to.have.property(\"x-arango-version\", \"99999\");\n          done();\n        },\n      ];\n      db.request({ headers: {} }, () => {});\n    });\n  });\n  describe(\"with agentOptions\", () => {\n    const _httpAgent = http.Agent;\n    const _httpsAgent = https.Agent;\n    let protocol: any;\n    let options: any;\n    beforeEach(() => {\n      protocol = undefined;\n      options = undefined;\n    });\n    before(() => {\n      let Agent = (proto: any) =>\n        function (opts: any) {\n          protocol = proto;\n          options = opts;\n          return () => null;\n        };\n      (http as any).Agent = Agent(\"http\");\n      (https as any).Agent = Agent(\"https\");\n    });\n    after(() => {\n      (http as any).Agent = _httpAgent;\n      (https as any).Agent = _httpsAgent;\n    });\n    it(\"passes the agentOptions to the agent\", () => {\n      new Database({ agentOptions: { maxSockets: 23 } }); // eslint-disable-line no-new\n      expect(options).to.have.property(\"maxSockets\", 23);\n    });\n    it(\"uses the built-in agent for the protocol\", () => {\n      // default: http\n      new Database(); // eslint-disable-line no-new\n      expect(protocol).to.equal(\"http\");\n      new Database(\"https://localhost:8529\"); // eslint-disable-line no-new\n      expect(protocol).to.equal(\"https\");\n      new Database(\"http://localhost:8529\"); // eslint-disable-line no-new\n      expect(protocol).to.equal(\"http\");\n    });\n  });\n  describe(\"with agent\", () => {\n    const _httpRequest = http.request;\n    const _httpsRequest = https.request;\n    let protocol: any;\n    let options: any;\n    beforeEach(() => {\n      protocol = undefined;\n      options = undefined;\n    });\n    before(() => {\n      let Request = (proto: any) => (opts: any) => {\n        protocol = proto;\n        options = opts;\n        return {\n          on() {\n            return this;\n          },\n          end() {\n            return this;\n          },\n        };\n      };\n      (http as any).request = Request(\"http\");\n      (https as any).request = Request(\"https\");\n    });\n    after(() => {\n      (http as any).request = _httpRequest;\n      (https as any).request = _httpsRequest;\n    });\n    it(\"passes the agent to the request function\", () => {\n      let agent = Symbol(\"agent\");\n      let db;\n      db = new Database({ agent }); // default: http\n      db.request({ headers: {} }, () => {});\n      expect(options).to.have.property(\"agent\", agent);\n      agent = Symbol(\"agent\");\n      db = new Database({ agent, url: \"https://localhost:8529\" });\n      db.request({ headers: {} }, () => {});\n      expect(options).to.have.property(\"agent\", agent);\n      agent = Symbol(\"agent\");\n      db = new Database({ agent, url: \"http://localhost:8529\" });\n      db.request({ headers: {} }, () => {});\n      expect(options).to.have.property(\"agent\", agent);\n    });\n    it(\"uses the request function for the protocol\", () => {\n      const agent = Symbol(\"agent\");\n      let db;\n      db = new Database({ agent }); // default: http\n      db.request({ headers: {} }, () => {});\n      expect(protocol).to.equal(\"http\");\n      db = new Database({ agent, url: \"https://localhost:8529\" });\n      db.request({ headers: {} }, () => {});\n      expect(protocol).to.equal(\"https\");\n      db = new Database({ agent, url: \"http://localhost:8529\" });\n      db.request({ headers: {} }, () => {});\n      expect(protocol).to.equal(\"http\");\n    });\n    it(\"calls Agent#destroy when the connection is closed\", () => {\n      const agent = {\n        _destroyed: false,\n        destroy() {\n          this._destroyed = true;\n        },\n      };\n      const db = new Database({ agent });\n      expect(agent._destroyed).to.equal(false);\n      db.close();\n      expect(agent._destroyed).to.equal(true);\n    });\n  });\n});\n"]}