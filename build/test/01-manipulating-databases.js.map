{"version":3,"file":"01-manipulating-databases.js","sourceRoot":"","sources":["../../src/test/01-manipulating-databases.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from \"chai\";\nimport { Database } from \"../database\";\nimport { ArangoError } from \"../error\";\n\nconst ARANGO_URL = process.env.TEST_ARANGODB_URL || \"http://localhost:8529\";\nconst ARANGO_VERSION = Number(\n  process.env.ARANGO_VERSION || process.env.ARANGOJS_DEVEL_VERSION || 30400\n);\n\ndescribe(\"Manipulating databases\", function () {\n  let db: Database;\n  beforeEach(() => {\n    db = new Database({ url: ARANGO_URL, arangoVersion: ARANGO_VERSION });\n  });\n  afterEach(() => {\n    db.close();\n  });\n  describe(\"database.useDatabase\", () => {\n    it(\"updates the database name\", () => {\n      const name = \"example\";\n      expect(db.name).to.equal(\"_system\"); // default\n      db.useDatabase(name);\n      expect(db.name).to.equal(name);\n    });\n    it(\"returns itself\", () => {\n      const db2 = db.useDatabase(\"nope\");\n      expect(db).to.equal(db2);\n    });\n  });\n  describe(\"database.createDatabase\", () => {\n    let name = `testdb_${Date.now()}`;\n    afterEach(async () => {\n      db.useDatabase(\"_system\");\n      await db.dropDatabase(name);\n    });\n    it(\"creates a database with the given name\", async () => {\n      await db.createDatabase(name);\n      db.useDatabase(name);\n      const info = await db.get();\n      expect(info.name).to.equal(name);\n    });\n    it(\"adds the given users to the database\");\n  });\n  describe(\"database.get\", () => {\n    it(\"fetches the database description if the database exists\", async () => {\n      const info = await db.get();\n      expect(info.name).to.equal(db.name);\n      expect(db.name).to.equal(\"_system\");\n    });\n    it(\"fails if the database does not exist\", async () => {\n      db.useDatabase(\"__does_not_exist__\");\n      try {\n        await db.get();\n      } catch (e) {\n        expect(e).to.be.an.instanceof(ArangoError);\n        return;\n      }\n      expect.fail(\"should not succeed\");\n    });\n  });\n  describe(\"database.listDatabases\", () => {\n    it(\"returns a list of all databases\", async () => {\n      const databases = await db.listDatabases();\n      expect(databases).to.be.an.instanceof(Array);\n      expect(databases.indexOf(\"_system\")).to.be.greaterThan(-1);\n    });\n  });\n  describe(\"database.listUserDatabases\", () => {\n    it(\"returns a list of databases accessible to the active user\");\n  });\n  describe(\"database.dropDatabase\", () => {\n    let name = `testdb_${Date.now()}`;\n    beforeEach(async () => {\n      await db.createDatabase(name);\n    });\n    it(\"deletes the given database from the server\", async () => {\n      await db.dropDatabase(name);\n      let temp = new Database().useDatabase(name);\n      try {\n        await temp.get();\n      } catch (e) {\n        return;\n      } finally {\n        temp.close();\n      }\n      expect.fail(\"should not succeed\");\n    });\n  });\n});\n"]}