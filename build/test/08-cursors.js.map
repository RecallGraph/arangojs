{"version":3,"file":"08-cursors.js","sourceRoot":"","sources":["../../src/test/08-cursors.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from \"chai\";\nimport { LinkedList } from \"x3-linkedlist\";\nimport { aql } from \"../aql\";\nimport { ArrayCursor, BatchedArrayCursor } from \"../cursor\";\nimport { Database } from \"../database\";\n\nconst ARANGO_URL = process.env.TEST_ARANGODB_URL || \"http://localhost:8529\";\nconst ARANGO_VERSION = Number(\n  process.env.ARANGO_VERSION || process.env.ARANGOJS_DEVEL_VERSION || 30400\n);\n\nconst aqlQuery = aql`FOR i In 0..10 RETURN i`;\nconst aqlResult = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nasync function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(() => resolve(), ms);\n  });\n}\n\ndescribe(\"Item-wise Cursor API\", () => {\n  let db: Database;\n  let cursor: ArrayCursor;\n  before(() => {\n    db = new Database({ url: ARANGO_URL, arangoVersion: ARANGO_VERSION });\n  });\n  after(() => {\n    db.close();\n  });\n  beforeEach(async () => {\n    cursor = await db.query(aqlQuery);\n  });\n  describe(\"for await of cursor\", () => {\n    it(\"returns each next result of the Cursor\", async () => {\n      let i = 0;\n      for await (const value of cursor) {\n        expect(value).to.equal(aqlResult[i]);\n        i += 1;\n      }\n      expect(i).to.equal(aqlResult.length);\n      expect(cursor.hasNext).to.equal(false);\n    });\n  });\n  describe(\"cursor.all\", () => {\n    it(\"returns an Array of all results\", async () => {\n      const values = await cursor.all();\n      expect(values).to.eql(aqlResult);\n    });\n  });\n  describe(\"cursor.next\", () => {\n    it(\"returns the next result of the Cursor\", async () => {\n      const val1 = await cursor.next();\n      expect(val1).to.equal(0);\n      const val2 = await cursor.next();\n      expect(val2).to.equal(1);\n    });\n  });\n  describe(\"cursor.hasNext\", () => {\n    it(\"returns true if the Cursor has more results\", async () => {\n      expect(cursor.hasNext).to.equal(true);\n      const val = await cursor.next();\n      expect(val).to.be.a(\"number\");\n    });\n    it(\"returns false if the Cursor is empty\", async () => {\n      await cursor.all();\n      expect(cursor.hasNext).to.equal(false);\n    });\n    it(\"returns true after first batch is consumed\", async () => {\n      const cursor = await db.query(aqlQuery, { batchSize: 1 });\n      expect((cursor.batches as any)._batches.length).to.equal(1);\n      cursor.next();\n      expect((cursor.batches as any)._batches.length).to.equal(0);\n      expect(cursor.hasNext).to.equal(true);\n    });\n    it(\"returns false after last batch is consumed\", async () => {\n      const cursor = await db.query(aql`FOR i In 0..1 RETURN i`, {\n        batchSize: 2,\n      });\n      expect(cursor.hasNext).to.equal(true);\n      expect((cursor.batches as any)._batches.length).to.equal(1);\n      const val1 = await cursor.next();\n      expect(val1).to.equal(0);\n      expect(cursor.hasNext).to.equal(true);\n      expect((cursor.batches as any)._batches.length).to.equal(1);\n      const val2 = await cursor.next();\n      expect(val2).to.equal(1);\n      expect(cursor.hasNext).to.equal(false);\n      expect((cursor.batches as any)._batches.length).to.equal(0);\n    });\n    it(\"returns false after last result is consumed\", async () => {\n      const cursor = await db.query(aql`FOR i In 0..1 RETURN i`, {\n        batchSize: 2,\n      });\n      expect(cursor.hasNext).to.equal(true);\n      expect((cursor.batches as any)._batches.length).to.equal(1);\n      const val1 = await cursor.next();\n      expect(val1).to.equal(0);\n      expect(cursor.hasNext).to.equal(true);\n      expect((cursor.batches as any)._batches.length).to.equal(1);\n      const val2 = await cursor.next();\n      expect(val2).to.equal(1);\n      expect(cursor.hasNext).to.equal(false);\n      expect((cursor.batches as any)._batches.length).to.equal(0);\n    });\n    it.skip(\"returns 404 after timeout\", async () => {\n      const cursor = await db.query(aql`FOR i In 0..1 RETURN i`, {\n        batchSize: 1,\n        ttl: 1,\n      });\n      expect(cursor.hasNext).to.equal(true);\n      expect((cursor as any)._batches.length).to.equal(1);\n      const val = await cursor.next();\n      expect(val).to.equal(0);\n      expect(cursor.hasNext).to.equal(true);\n      expect((cursor as any)._batches.length).to.equal(0);\n      await sleep(3000);\n      try {\n        await cursor.next();\n      } catch (err) {\n        expect(err.code).to.equal(404);\n        return;\n      }\n      expect.fail();\n    });\n    it(\"returns false after last result is consumed (with large amount of results)\", async () => {\n      const EXPECTED_LENGTH = 100000;\n      async function loadMore(cursor: ArrayCursor, totalLength: number) {\n        await cursor.next();\n        totalLength++;\n        expect(cursor.hasNext).to.equal(totalLength !== EXPECTED_LENGTH);\n        if (cursor.hasNext) {\n          await loadMore(cursor, totalLength);\n        }\n      }\n      const cursor = await db.query(`FOR i In 1..${EXPECTED_LENGTH} RETURN i`);\n      await loadMore(cursor, 0);\n    });\n  });\n  describe(\"cursor.forEach\", () => {\n    it(\"invokes the callback for each value\", async () => {\n      const results: any[] = [];\n      await cursor.forEach((value) => {\n        results.push(value);\n      });\n      expect(results).to.eql(aqlResult);\n    });\n    it(\"aborts if the callback returns false\", async () => {\n      const results: any[] = [];\n      await cursor.forEach((value) => {\n        results.push(value);\n        if (value === 5) return false;\n        return;\n      });\n      expect(results).to.eql([0, 1, 2, 3, 4, 5]);\n    });\n  });\n  describe(\"cursor.map\", () => {\n    it(\"maps all result values over the callback\", async () => {\n      const results = await cursor.map((value) => value * 2);\n      expect(results).to.eql(aqlResult.map((value) => value * 2));\n    });\n  });\n  describe(\"cursor.flatMap\", () => {\n    it(\"flat-maps all result values over the callback\", async () => {\n      const results = await cursor.flatMap((value) => [value, value * 2]);\n      expect(results).to.eql(\n        aqlResult\n          .map((value) => [value, value * 2])\n          .reduce((acc, next) => {\n            acc.push(...next);\n            return acc;\n          }, [] as number[])\n      );\n    });\n    it(\"doesn't choke on non-arrays\", async () => {\n      const results = await cursor.flatMap((value) => value * 2);\n      expect(results).to.eql(aqlResult.map((value) => value * 2));\n    });\n  });\n  describe(\"cursor.reduce\", () => {\n    it(\"reduces the result values with the callback\", async () => {\n      const result = await cursor.reduce((a, b) => a + b);\n      expect(result).to.eql(aqlResult.reduce((a, b) => a + b));\n    });\n  });\n  describe(\"cursor.kill\", () => {\n    it(\"kills the cursor\", async () => {\n      const cursor = await db.query(aql`FOR i IN 1..5 RETURN i`, {\n        batchSize: 2,\n      });\n      const { _host: host, _id: id } = cursor as any;\n      expect(cursor.batches.hasMore).to.equal(true);\n      await cursor.kill();\n      expect(cursor.batches.hasMore).to.equal(false);\n      try {\n        await db.request({\n          method: \"PUT\",\n          path: `/_api/cursor/${id}`,\n          host: host,\n        });\n      } catch (e) {\n        expect(e).to.have.property(\"errorNum\", 1600);\n        return;\n      }\n      expect.fail(\"should not be able to fetch additional result set\");\n    });\n  });\n});\n\ndescribe(\"Batch-wise Cursor API\", () => {\n  let db: Database;\n  let cursor: BatchedArrayCursor;\n  before(() => {\n    db = new Database({ url: ARANGO_URL, arangoVersion: ARANGO_VERSION });\n  });\n  after(() => {\n    db.close();\n  });\n  beforeEach(async () => {\n    cursor = (await db.query(aqlQuery, { batchSize: 1 })).batches;\n  });\n  describe(\"for await of cursor\", () => {\n    it(\"returns each next result of the Cursor\", async () => {\n      let i = 0;\n      for await (const value of cursor) {\n        expect(value).to.eql([aqlResult[i]]);\n        i += 1;\n      }\n      expect(i).to.equal(aqlResult.length);\n      expect(cursor.hasNext).to.equal(false);\n    });\n  });\n  describe(\"cursor.all\", () => {\n    it(\"returns an Array of all results\", async () => {\n      const values = await cursor.all();\n      expect(values).to.eql(aqlResult.map((v) => [v]));\n    });\n  });\n  describe(\"cursor.next\", () => {\n    it(\"returns the next result of the Cursor\", async () => {\n      const val1 = await cursor.next();\n      expect(val1).to.eql([0]);\n      const val2 = await cursor.next();\n      expect(val2).to.eql([1]);\n    });\n  });\n  describe(\"cursor.hasNext\", () => {\n    it(\"returns true if the Cursor has more results\", async () => {\n      expect(cursor.hasNext).to.equal(true);\n      const val = await cursor.next();\n      expect(val).to.be.an(\"array\");\n      expect(val?.[0]).to.be.a(\"number\");\n    });\n    it(\"returns false if the Cursor is empty\", async () => {\n      await cursor.all();\n      expect(cursor.hasNext).to.equal(false);\n    });\n    it(\"returns true after first batch is consumed\", async () => {\n      const cursor = (await db.query(aqlQuery, { batchSize: 1 })).batches;\n      expect((cursor as any)._batches.length).to.equal(1);\n      cursor.next();\n      expect((cursor as any)._batches.length).to.equal(0);\n      expect(cursor.hasNext).to.equal(true);\n    });\n    it(\"returns false after last batch is consumed\", async () => {\n      const cursor = (\n        await db.query(aql`FOR i In 0..1 RETURN i`, {\n          batchSize: 1,\n        })\n      ).batches;\n      expect(cursor.hasNext).to.equal(true);\n      expect((cursor as any)._batches.length).to.equal(1);\n      const val1 = await cursor.next();\n      expect(val1).to.eql([0]);\n      expect(cursor.hasNext).to.equal(true);\n      expect((cursor as any)._batches.length).to.equal(0);\n      const val2 = await cursor.next();\n      expect(val2).to.eql([1]);\n      expect(cursor.hasNext).to.equal(false);\n      expect((cursor as any)._batches.length).to.equal(0);\n    });\n    it.skip(\"returns 404 after timeout\", async () => {\n      const cursor = await db.query(aql`FOR i In 0..1 RETURN i`, {\n        batchSize: 1,\n        ttl: 1,\n      });\n      expect(cursor.hasNext).to.equal(true);\n      expect((cursor as any)._batches.length).to.equal(1);\n      const val = await cursor.next();\n      expect(val).to.equal(0);\n      expect(cursor.hasNext).to.equal(true);\n      expect((cursor as any)._batches.length).to.equal(0);\n      await sleep(3000);\n      try {\n        await cursor.next();\n      } catch (err) {\n        expect(err.code).to.equal(404);\n        return;\n      }\n      expect.fail();\n    });\n    it(\"returns false after last result is consumed (with large amount of results)\", async () => {\n      const EXPECTED_LENGTH = 100000;\n      async function loadMore(cursor: ArrayCursor, totalLength: number) {\n        await cursor.next();\n        totalLength++;\n        expect(cursor.hasNext).to.equal(totalLength !== EXPECTED_LENGTH);\n        if (cursor.hasNext) {\n          await loadMore(cursor, totalLength);\n        }\n      }\n      const cursor = await db.query(`FOR i In 1..${EXPECTED_LENGTH} RETURN i`);\n      await loadMore(cursor, 0);\n    });\n  });\n  describe(\"cursor.forEach\", () => {\n    it(\"invokes the callback for each value\", async () => {\n      const results: any[] = [];\n      await cursor.forEach((batch) => {\n        results.push(...batch);\n      });\n      expect(results).to.eql(aqlResult);\n    });\n    it(\"aborts if the callback returns false\", async () => {\n      const results: any[] = [];\n      await cursor.forEach((batch) => {\n        results.push(...batch);\n        if (batch[0] === 5) return false;\n        return;\n      });\n      expect(results).to.eql([0, 1, 2, 3, 4, 5]);\n    });\n  });\n  describe(\"cursor.map\", () => {\n    it(\"maps all result values over the callback\", async () => {\n      const results = await cursor.map(([value]) => value * 2);\n      expect(results).to.eql(aqlResult.map((value) => value * 2));\n    });\n  });\n  describe(\"cursor.flatMap\", () => {\n    it(\"flat-maps all result values over the callback\", async () => {\n      const results = await cursor.flatMap(([value]) => [value, value * 2]);\n      expect(results).to.eql(\n        aqlResult\n          .map((value) => [value, value * 2])\n          .reduce((acc, next) => {\n            acc.push(...next);\n            return acc;\n          }, [] as number[])\n      );\n    });\n    it(\"doesn't choke on non-arrays\", async () => {\n      const results = await cursor.flatMap(([value]) => value * 2);\n      expect(results).to.eql(aqlResult.map((value) => value * 2));\n    });\n  });\n  describe(\"cursor.reduce\", () => {\n    it(\"reduces the result values with the callback\", async () => {\n      const result = await cursor.reduce((a, [b]) => a + b, 0);\n      expect(result).to.eql(aqlResult.reduce((a, b) => a + b));\n    });\n  });\n  describe(\"cursor.next\", () => {\n    beforeEach(async () => {\n      cursor = (await db.query(aql`FOR i IN 1..10 RETURN i`, { batchSize: 5 }))\n        .batches;\n    });\n    it(\"fetches the next batch when empty\", async () => {\n      const result: LinkedList<LinkedList<any>> = (cursor as any)._batches;\n      expect([...result.first!.value.values()]).to.eql([1, 2, 3, 4, 5]);\n      expect(cursor.hasMore).to.equal(true);\n      result.clear();\n      expect(await cursor.next()).to.eql([6, 7, 8, 9, 10]);\n      expect(cursor.hasMore).to.equal(false);\n    });\n    it(\"returns all fetched values\", async () => {\n      expect(await cursor.next()).to.eql([1, 2, 3, 4, 5]);\n      expect(await cursor.items.next()).to.equal(6);\n      expect(await cursor.next()).to.eql([7, 8, 9, 10]);\n    });\n  });\n  describe(\"cursor.kill\", () => {\n    it(\"kills the cursor\", async () => {\n      const cursor = await db.query(aql`FOR i IN 1..5 RETURN i`, {\n        batchSize: 2,\n      });\n      const { _host: host, _id: id } = cursor as any;\n      expect(cursor.batches.hasMore).to.equal(true);\n      await cursor.kill();\n      expect(cursor.batches.hasMore).to.equal(false);\n      try {\n        await db.request({\n          method: \"PUT\",\n          path: `/_api/cursor/${id}`,\n          host: host,\n        });\n      } catch (e) {\n        expect(e).to.have.property(\"errorNum\", 1600);\n        return;\n      }\n      expect.fail(\"should not be able to fetch additional result set\");\n    });\n  });\n});\n"]}