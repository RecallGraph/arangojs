{"version":3,"file":"22-foxx-api.js","sourceRoot":"","sources":["../../src/test/22-foxx-api.ts"],"names":[],"mappings":";;AAAA,+BAA8B;AAC9B,yBAAyB;AACzB,6BAA6B;AAC7B,0CAAuC;AACvC,oCAAuC;AACvC,sDAAmD;AAEnD,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI,uBAAuB,CAAC;AAC5E,MAAM,yBAAyB,GAAG,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC;AAC/E,MAAM,cAAc,GAAG,MAAM,CAC3B,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,OAAO,CAAC,GAAG,CAAC,sBAAsB,IAAI,KAAK,CAC1E,CAAC;AAEF,MAAM,mBAAmB,GAAG,2BAAY,CAAC,UAAU,CAAC,CAAC;AACrD,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;AACpD,MAAM,KAAK,GAAG,iBAAiB,CAAC;AAChC,MAAM,mBAAmB,GAAG,0BAA0B,CAAC;AAEvD,SAAS,iBAAiB,CAAC,WAAmB;IAC5C,IAAI,yBAAyB,EAAE;QAC7B,OAAO,WAAW,CAAC,OAAO,CAAC,mBAAmB,EAAE,yBAAyB,CAAC,CAAC;KAC5E;IACD,IAAI,mBAAmB,CAAC,KAAK,CAAC,mBAAmB,CAAC,EAAE;QAClD,OAAO,WAAW,CAAC,OAAO,CAAC,mBAAmB,GAAG,GAAG,EAAE,SAAS,CAAC,CAAC;KAClE;IACD,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,IAAI,EAAY,CAAC;IACjB,IAAI,WAAgB,CAAC;IACrB,MAAM,CAAC,KAAK,IAAI,EAAE;QAChB,EAAE,GAAG,IAAI,mBAAQ,CAAC,EAAE,GAAG,EAAE,UAAU,EAAE,aAAa,EAAE,cAAc,EAAE,CAAC,CAAC;QACtE,MAAM,EAAE,CAAC,cAAc,CACrB,mBAAmB,EACnB,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,6BAA6B,CAAC,CAAC,CACzE,CAAC;QACF,WAAW,GAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,KAAK,IAAI,EAAE;QACf,IAAI;YACF,MAAM,EAAE,CAAC,gBAAgB,CAAC,mBAAmB,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;SACjE;QAAC,OAAO,CAAC,EAAE,GAAE;QACd,EAAE,CAAC,KAAK,EAAE,CAAC;IACb,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,IAAI;YACF,MAAM,EAAE,CAAC,gBAAgB,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;SACnD;QAAC,OAAO,CAAC,EAAE,GAAE;IAChB,CAAC,CAAC,CAAC;IAEH,MAAM,KAAK,GAAG;QACZ;YACE,IAAI,EAAE,aAAa;YACnB,MAAM,EAAE,CAAC,WAAgB,EAAE,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;SACnD;QACD;YACE,IAAI,EAAE,cAAc;YACpB,MAAM,EAAE,CAAC,WAAgB,EAAE,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG;SACpD;QACD;YACE,IAAI,EAAE,UAAU;YAChB,MAAM,EAAE,CAAC,WAAgB,EAAE,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG;SACpD;QACD;YACE,IAAI,EAAE,UAAU;YAChB,MAAM,EAAE,GAAG,EAAE,CACX,EAAE,CAAC,YAAY,CACb,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,4BAA4B,CAAC,CAC1D;SACJ;QACD;YACE,IAAI,EAAE,WAAW;YACjB,MAAM,EAAE,GAAG,EAAE,CACX,EAAE,CAAC,YAAY,CACb,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,6BAA6B,CAAC,CAC3D;SACJ;QACD;YACE,IAAI,EAAE,cAAc;YACpB,MAAM,EAAE,CAAC,WAAgB,EAAE,EAAE,CAAC,iBAAiB,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC;SACvE;QACD;YACE,IAAI,EAAE,eAAe;YACrB,MAAM,EAAE,CAAC,WAAgB,EAAE,EAAE,CAAC,iBAAiB,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC;SACxE;KACF,CAAC;IAEF,KAAK,MAAM,CAAC,IAAI,KAAK,EAAE;QACrB,EAAE,CAAC,iBAAiB,CAAC,CAAC,IAAI,sBAAsB,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,EAAE,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;YACtD,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC;YACzC,aAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,eAAe,CAAC,CAAC,IAAI,sBAAsB,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAC,CAChE,CAAC;YACF,MAAM,EAAE,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;YACtD,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC;YACzC,aAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,eAAe,CAAC,CAAC,IAAI,sBAAsB,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAC,CAChE,CAAC;YACF,MAAM,EAAE,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;YACtD,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC;YACzC,aAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;KACJ;IAED,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACnD,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CACb,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,6BAA6B,CAAC,CAC3D,CACF,CAAC;QACF,MAAM,EAAE,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QACjC,IAAI;YACF,MAAM,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC;YAC5B,aAAM,CAAC,IAAI,EAAE,CAAC;SACf;QAAC,OAAO,CAAC,EAAE,GAAE;IAChB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACvD,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CACb,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,6BAA6B,CAAC,CAC3D,CACF,CAAC;QACF,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QACrD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;QAC/D,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CACb,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,6BAA6B,CAAC,CAC3D,CACF,CAAC;QACF,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,uBAAuB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC3D,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;QACjD,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,wBAAwB,CAAC,CAAC,CACvE,CAAC;QACF,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QACrD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACnD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,wBAAwB,CAAC,CAAC,CACvE,CAAC;QACF,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,uBAAuB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC3D,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;QAC9D,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,wBAAwB,CAAC,CAAC,CACvE,CAAC;QACF,MAAM,UAAU,GAAG,MAAM,EAAE,CAAC,0BAA0B,CAAC,KAAK,EAAE;YAC5D,KAAK,EAAE,MAAM;SACd,CAAC,CAAC;QACH,aAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC7C,aAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAC7D,aAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACzD,aAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC7C,aAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACzD,aAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QACrD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QACvD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,wBAAwB,CAAC,CAAC,CACvE,CAAC;QACF,MAAM,UAAU,GAAG,MAAM,EAAE,CAAC,0BAA0B,CACpD,KAAK,EACL;YACE,KAAK,EAAE,MAAM;SACd,EACD,IAAI,CACL,CAAC;QACF,aAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC9C,aAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC5D,aAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACxD,aAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QACpD,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,uBAAuB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC3D,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC/C,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;QAC/D,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,wBAAwB,CAAC,CAAC,CACvE,CAAC;QACF,MAAM,WAAW,GAAG,MAAM,EAAE,CAAC,2BAA2B,CAAC,KAAK,EAAE;YAC9D,KAAK,EAAE,MAAM;SACd,CAAC,CAAC;QACH,aAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC9C,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAC9D,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC1D,aAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC9C,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC1D,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QACrE,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QACrD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QACvD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;QACvE,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,wBAAwB,CAAC,CAAC,CACvE,CAAC;QACF,MAAM,WAAW,GAAG,MAAM,EAAE,CAAC,2BAA2B,CACtD,KAAK,EACL;YACE,KAAK,EAAE,MAAM;SACd,EACD,IAAI,CACL,CAAC;QACF,aAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC/C,aAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC7D,aAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACzD,aAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QACjD,aAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QACtE,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,uBAAuB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC3D,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC/C,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QAC3D,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,wBAAwB,CAAC,CAAC,CACvE,CAAC;QACF,MAAM,EAAE,CAAC,2BAA2B,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAChE,MAAM,EAAE,CAAC,0BAA0B,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAC/D,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QACrD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACxD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;QACnE,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,wBAAwB,CAAC,CAAC,CACvE,CAAC;QACF,MAAM,EAAE,CAAC,2BAA2B,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,IAAI,CAAC,CAAC;QACtE,MAAM,EAAE,CAAC,0BAA0B,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,IAAI,CAAC,CAAC;QACrE,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,uBAAuB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC3D,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAChD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;QACjE,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,wBAAwB,CAAC,CAAC,CACvE,CAAC;QACF,MAAM,EAAE,CAAC,0BAA0B,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAC/D,MAAM,EAAE,CAAC,2BAA2B,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;QAC/D,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QACrD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QACvD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;QACzE,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,wBAAwB,CAAC,CAAC,CACvE,CAAC;QACF,MAAM,EAAE,CAAC,0BAA0B,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,IAAI,CAAC,CAAC;QACrE,MAAM,EAAE,CAAC,2BAA2B,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,IAAI,CAAC,CAAC;QACrE,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,uBAAuB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC3D,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC/C,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;QACtD,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CACb,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,6BAA6B,CAAC,CAC3D,CACF,CAAC;QACF,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;QACpD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;QAC9D,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CACb,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,6BAA6B,CAAC,CAC3D,CACF,CAAC;QACF,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,sBAAsB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC1D,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,uBAAuB,CAAC,CAAC,CACtE,CAAC;QACF,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;QACpD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACnD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACxD,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,uBAAuB,CAAC,CAAC,CACtE,CAAC;QACF,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,sBAAsB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC1D,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;QAC9D,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,uBAAuB,CAAC,CAAC,CACtE,CAAC;QACF,MAAM,UAAU,GAAG,MAAM,EAAE,CAAC,yBAAyB,CAAC,KAAK,EAAE;YAC3D,KAAK,EAAE,OAAO;SACf,CAAC,CAAC;QACH,aAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC7C,aAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAC9D,aAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACzD,aAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC7C,aAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACzD,aAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;QACpD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACxD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,uBAAuB,CAAC,CAAC,CACtE,CAAC;QACF,MAAM,UAAU,GAAG,MAAM,EAAE,CAAC,yBAAyB,CACnD,KAAK,EACL;YACE,KAAK,EAAE,OAAO;SACf,EACD,IAAI,CACL,CAAC;QACF,aAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC9C,aAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC7D,aAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACxD,aAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QACpD,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,sBAAsB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC1D,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAChD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;QAC9D,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,uBAAuB,CAAC,CAAC,CACtE,CAAC;QACF,MAAM,WAAW,GAAG,MAAM,EAAE,CAAC,0BAA0B,CAAC,KAAK,EAAE;YAC7D,KAAK,EAAE,OAAO;SACf,CAAC,CAAC;QACH,aAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC9C,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAC/D,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC1D,aAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC9C,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC1D,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QACrE,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;QACpD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACxD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,uBAAuB,CAAC,CAAC,CACtE,CAAC;QACF,MAAM,WAAW,GAAG,MAAM,EAAE,CAAC,0BAA0B,CACrD,KAAK,EACL;YACE,KAAK,EAAE,OAAO;SACf,EACD,IAAI,CACL,CAAC;QACF,aAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC/C,aAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC9D,aAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACzD,aAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QACjD,aAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QACtE,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,sBAAsB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC1D,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAChD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;QAC1D,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,uBAAuB,CAAC,CAAC,CACtE,CAAC;QACF,MAAM,WAAW,GAAG,MAAM,EAAE,CAAC,0BAA0B,CAAC,KAAK,EAAE;YAC7D,KAAK,EAAE,QAAQ;SAChB,CAAC,CAAC;QACH,aAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC9C,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QACrE,aAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC9C,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAChE,MAAM,UAAU,GAAG,MAAM,EAAE,CAAC,yBAAyB,CAAC,KAAK,EAAE;YAC3D,KAAK,EAAE,QAAQ;SAChB,CAAC,CAAC;QACH,aAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC7C,aAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAC/D,aAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACzD,aAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC7C,aAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAC/D,aAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;QACpD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QACzD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;QAClE,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,uBAAuB,CAAC,CAAC,CACtE,CAAC;QACF,MAAM,WAAW,GAAG,MAAM,EAAE,CAAC,0BAA0B,CACrD,KAAK,EACL,EAAE,KAAK,EAAE,QAAQ,EAAE,EACnB,IAAI,CACL,CAAC;QACF,aAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC/C,aAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC/D,aAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACzD,aAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QACjD,aAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QACtE,MAAM,UAAU,GAAG,MAAM,EAAE,CAAC,yBAAyB,CACnD,KAAK,EACL;YACE,KAAK,EAAE,QAAQ;SAChB,EACD,IAAI,CACL,CAAC;QACF,aAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC9C,aAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC9D,aAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC9D,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,sBAAsB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC1D,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QACjD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;QAChE,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,uBAAuB,CAAC,CAAC,CACtE,CAAC;QACF,MAAM,UAAU,GAAG,MAAM,EAAE,CAAC,yBAAyB,CAAC,KAAK,EAAE;YAC3D,KAAK,EAAE,QAAQ;SAChB,CAAC,CAAC;QACH,aAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC7C,aAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACzD,aAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACzD,aAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC7C,aAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAC/D,aAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACzD,MAAM,WAAW,GAAG,MAAM,EAAE,CAAC,0BAA0B,CAAC,KAAK,EAAE;YAC7D,KAAK,EAAE,QAAQ;SAChB,CAAC,CAAC;QACH,aAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC9C,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAChE,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC1D,aAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC9C,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC1D,aAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QACrE,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;QACpD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QACzD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;QACxE,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,uBAAuB,CAAC,CAAC,CACtE,CAAC;QACF,MAAM,UAAU,GAAG,MAAM,EAAE,CAAC,yBAAyB,CACnD,KAAK,EACL;YACE,KAAK,EAAE,QAAQ;SAChB,EACD,IAAI,CACL,CAAC;QACF,aAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC9C,aAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACxD,aAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC9D,aAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QACpD,MAAM,WAAW,GAAG,MAAM,EAAE,CAAC,0BAA0B,CACrD,KAAK,EACL;YACE,KAAK,EAAE,QAAQ;SAChB,EACD,IAAI,CACL,CAAC;QACF,aAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC/C,aAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC/D,aAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACzD,aAAM,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QACjD,aAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QACtE,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,sBAAsB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC1D,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QACjD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;QACtC,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CACb,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,6BAA6B,CAAC,CAC3D,CACF,CAAC;QACF,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAC7C,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QAC3D,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CACb,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,6BAA6B,CAAC,CAC3D,CACF,CAAC;QACF,MAAM,QAAQ,GAAG,MAAM,EAAE,CAAC,YAAY,EAAE,CAAC;QACzC,aAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACzC,aAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACnD,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CACb,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,6BAA6B,CAAC,CAC3D,CACF,CAAC;QACF,MAAM,QAAQ,GAAG,MAAM,EAAE,CAAC,YAAY,EAAE,CAAC;QACzC,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,KAAK,KAAK,CAAE,CAAC;QACrE,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,0BAA0B,CAAC,CAAC;QACrE,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACrD,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC7C,aAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACpC,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACvD,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CACb,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,6BAA6B,CAAC,CAC3D,CACF,CAAC;QACF,MAAM,OAAO,GAAG,MAAM,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAC3C,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACjD,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,0BAA0B,CAAC,CAAC;QACrE,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACrD,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;QACvD,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAClD,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC7C,aAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;QAC5C,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC5C,aAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;QAC3C,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC7C,aAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;QACnD,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CACb,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,oCAAoC,CAAC,CAClE,CACF,CAAC;QACF,MAAM,OAAO,GAAG,MAAM,EAAE,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QACnD,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACnD,aAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;QAC1C,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CACb,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,oCAAoC,CAAC,CAClE,CACF,CAAC;QACF,MAAM,GAAG,GAAG,GAAG,KAAK,iBAAiB,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAC3E,aAAM,CAAC,MAAM,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAChE,MAAM,EAAE,CAAC,gBAAgB,CAAC,KAAK,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC;QACjD,IAAI;YACF,MAAM,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;YAC/B,aAAM,CAAC,IAAI,EAAE,CAAC;SACf;QAAC,OAAO,CAAC,EAAE;YACV,aAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,mBAAW,CAAC,CAAC;YACxC,aAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SACnC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QAC3D,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAC,CAChE,CAAC;QACF,IAAI;YACF,MAAM,EAAE,CAAC,gBAAgB,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;SAC5C;QAAC,OAAO,CAAC,EAAE;YACV,aAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,mBAAW,CAAC,CAAC;YACxC,aAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC7B,aAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SACnC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;QAC7D,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAC,CAChE,CAAC;QACF,MAAM,IAAI,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;QAChC,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QAC5D,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;QACzE,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAC,CAChE,CAAC;QACF,MAAM,IAAI,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAC/B,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QAC5D,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;QACjD,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CACb,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,6BAA6B,CAAC,CAC3D,CACF,CAAC;QACF,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACxC,aAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACzC,MAAM,OAAO,GAAG,MAAM,EAAE,CAAC,yBAAyB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAChE,aAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC3C,MAAM,SAAS,GAAG,MAAM,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAC7C,aAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;QACpD,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CACb,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,6BAA6B,CAAC,CAC3D,EACD,EAAE,WAAW,EAAE,IAAI,EAAE,CACtB,CAAC;QACF,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACxC,aAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACxC,MAAM,OAAO,GAAG,MAAM,EAAE,CAAC,yBAAyB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACjE,aAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC5C,MAAM,SAAS,GAAG,MAAM,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAC7C,aAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kBAAkB,EAAE,KAAK,IAAI,EAAE;QAChC,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC,CAC/D,CAAC;QACF,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACjD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACzC,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC1C,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;QACzC,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAC,CAChE,CAAC;QACF,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC9C,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CACb,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,6BAA6B,CAAC,CAC3D,CACF,CAAC;QACF,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC9C,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;QACpD,MAAM,EAAE,CAAC,cAAc,CACrB,KAAK,EACL,EAAE,CAAC,YAAY,CACb,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,6BAA6B,CAAC,CAC3D,CACF,CAAC;QACF,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;QACrD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAChD,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,EAAE,CAAC,IAAI,GAAG,KAAK,EAAE,CAAC,CAAC;QACrE,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACtC,aAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,0BAA0B,CAAC,CAAC;QACxE,aAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;QACtD,aAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACvD,aAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC9C,aAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACvC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACzC,aAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,MAAM,MAAM,GAAyB;QACnC,CAAC,YAAY,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACvD;YACE,yBAAyB;YACzB,CAAC,KAAa,EAAE,EAAE,CAAC,EAAE,CAAC,uBAAuB,CAAC,KAAK,CAAC;SACrD;QACD;YACE,wBAAwB;YACxB,CAAC,KAAa,EAAE,EAAE,CAAC,EAAE,CAAC,sBAAsB,CAAC,KAAK,CAAC;SACpD;QACD,CAAC,oBAAoB,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,EAAE,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QACvE,CAAC,gBAAgB,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,EAAE,CAAC,cAAc,CAAC,KAAK,EAAE,EAAS,CAAC,CAAC;QAC1E;YACE,4BAA4B;YAC5B,CAAC,KAAa,EAAE,EAAE,CAAC,EAAE,CAAC,0BAA0B,CAAC,KAAK,EAAE,EAAE,CAAC;SAC5D;QACD;YACE,2BAA2B;YAC3B,CAAC,KAAa,EAAE,EAAE,CAAC,EAAE,CAAC,yBAAyB,CAAC,KAAK,EAAE,EAAE,CAAC;SAC3D;QACD,CAAC,gBAAgB,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,EAAE,CAAC,cAAc,CAAC,KAAK,EAAE,EAAS,CAAC,CAAC;QAC1E;YACE,6BAA6B;YAC7B,CAAC,KAAa,EAAE,EAAE,CAAC,EAAE,CAAC,2BAA2B,CAAC,KAAK,EAAE,EAAE,CAAC;SAC7D;QACD;YACE,4BAA4B;YAC5B,CAAC,KAAa,EAAE,EAAE,CAAC,EAAE,CAAC,0BAA0B,CAAC,KAAK,EAAE,EAAE,CAAC;SAC5D;QACD;YACE,kBAAkB;YAClB,CAAC,KAAa,EAAE,EAAE,CAAC,EAAE,CAAC,gBAAgB,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC;SACzD;QACD,CAAC,iBAAiB,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,EAAE,CAAC,eAAe,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACrE,CAAC,kBAAkB,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,EAAE,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QACnE,CAAC,iBAAiB,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,EAAE,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QACjE;YACE,8BAA8B;YAC9B,CAAC,KAAa,EAAE,EAAE,CAAC,EAAE,CAAC,yBAAyB,CAAC,KAAK,EAAE,IAAI,CAAC;SAC7D;QACD;YACE,+BAA+B;YAC/B,CAAC,KAAa,EAAE,EAAE,CAAC,EAAE,CAAC,yBAAyB,CAAC,KAAK,EAAE,KAAK,CAAC;SAC9D;QACD;YACE,yBAAyB;YACzB,CAAC,KAAa,EAAE,EAAE,CAAC,EAAE,CAAC,uBAAuB,CAAC,KAAK,CAAC;SACrD;QACD,CAAC,kBAAkB,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,EAAE,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;KACpE,CAAC;IAEF,KAAK,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,MAAM,EAAE;QACnC,EAAE,CAAC,+CAA+C,IAAI,EAAE,EAAE,KAAK,IAAI,EAAE;YACnE,IAAI;gBACF,MAAM,MAAM,EAAE,CAAC;gBACf,aAAM,CAAC,IAAI,EAAE,CAAC;aACf;YAAC,OAAO,CAAC,EAAE;gBACV,aAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,mBAAW,CAAC,CAAC;gBACxC,aAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aAC9B;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,IAAI,EAAE,EAAE,KAAK,IAAI,EAAE;YACnE,IAAI;gBACF,MAAM,MAAM,CAAC,WAAW,CAAC,CAAC;gBAC1B,aAAM,CAAC,IAAI,EAAE,CAAC;aACf;YAAC,OAAO,CAAC,EAAE;gBACV,aAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,mBAAW,CAAC,CAAC;gBACxC,aAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aAC9B;QACH,CAAC,CAAC,CAAC;KACJ;AACH,CAAC,CAAC,CAAC","sourcesContent":["import { expect } from \"chai\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { Database } from \"../database\";\nimport { ArangoError } from \"../error\";\nimport { normalizeUrl } from \"../lib/normalizeUrl\";\n\nconst ARANGO_URL = process.env.TEST_ARANGODB_URL || \"http://localhost:8529\";\nconst ARANGO_URL_SELF_REACHABLE = process.env.TEST_ARANGODB_URL_SELF_REACHABLE;\nconst ARANGO_VERSION = Number(\n  process.env.ARANGO_VERSION || process.env.ARANGOJS_DEVEL_VERSION || 30400\n);\n\nconst normalizedArangoUrl = normalizeUrl(ARANGO_URL);\nconst localAppsPath = path.resolve(\".\", \"fixtures\");\nconst mount = \"/foxx-crud-test\";\nconst serviceServiceMount = \"/foxx-crud-test-download\";\n\nfunction makeSelfReachable(returnedUrl: string) {\n  if (ARANGO_URL_SELF_REACHABLE) {\n    return returnedUrl.replace(normalizedArangoUrl, ARANGO_URL_SELF_REACHABLE);\n  }\n  if (normalizedArangoUrl.match(/^[a-z]+:\\/\\/unix:/)) {\n    return returnedUrl.replace(normalizedArangoUrl + \":\", \"http://\");\n  }\n  return returnedUrl;\n}\n\ndescribe(\"Foxx service\", () => {\n  let db: Database;\n  let arangoPaths: any;\n  before(async () => {\n    db = new Database({ url: ARANGO_URL, arangoVersion: ARANGO_VERSION });\n    await db.installService(\n      serviceServiceMount,\n      fs.readFileSync(path.resolve(\"fixtures\", \"service-service-service.zip\"))\n    );\n    arangoPaths = (await db.route(serviceServiceMount).get()).body;\n  });\n\n  after(async () => {\n    try {\n      await db.uninstallService(serviceServiceMount, { force: true });\n    } catch (e) {}\n    db.close();\n  });\n\n  afterEach(async () => {\n    try {\n      await db.uninstallService(mount, { force: true });\n    } catch (e) {}\n  });\n\n  const cases = [\n    {\n      name: \"localJsFile\",\n      source: (arangoPaths: any) => arangoPaths.local.js,\n    },\n    {\n      name: \"localZipFile\",\n      source: (arangoPaths: any) => arangoPaths.local.zip,\n    },\n    {\n      name: \"localDir\",\n      source: (arangoPaths: any) => arangoPaths.local.dir,\n    },\n    {\n      name: \"jsBuffer\",\n      source: () =>\n        fs.readFileSync(\n          path.resolve(localAppsPath, \"minimal-working-service.js\")\n        ),\n    },\n    {\n      name: \"zipBuffer\",\n      source: () =>\n        fs.readFileSync(\n          path.resolve(localAppsPath, \"minimal-working-service.zip\")\n        ),\n    },\n    {\n      name: \"remoteJsFile\",\n      source: (arangoPaths: any) => makeSelfReachable(arangoPaths.remote.js),\n    },\n    {\n      name: \"remoteZipFile\",\n      source: (arangoPaths: any) => makeSelfReachable(arangoPaths.remote.zip),\n    },\n  ];\n\n  for (const c of cases) {\n    it(`installed via ${c.name} should be available`, async () => {\n      await db.installService(mount, c.source(arangoPaths));\n      const resp = await db.route(mount).get();\n      expect(resp.body).to.eql({ hello: \"world\" });\n    });\n\n    it(`replace via ${c.name} should be available`, async () => {\n      await db.installService(\n        mount,\n        fs.readFileSync(path.resolve(localAppsPath, \"itzpapalotl.zip\"))\n      );\n      await db.replaceService(mount, c.source(arangoPaths));\n      const resp = await db.route(mount).get();\n      expect(resp.body).to.eql({ hello: \"world\" });\n    });\n\n    it(`upgrade via ${c.name} should be available`, async () => {\n      await db.installService(\n        mount,\n        fs.readFileSync(path.resolve(localAppsPath, \"itzpapalotl.zip\"))\n      );\n      await db.upgradeService(mount, c.source(arangoPaths));\n      const resp = await db.route(mount).get();\n      expect(resp.body).to.eql({ hello: \"world\" });\n    });\n  }\n\n  it(\"uninstalled should not be available\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(\n        path.resolve(localAppsPath, \"minimal-working-service.zip\")\n      )\n    );\n    await db.uninstallService(mount);\n    try {\n      await db.route(mount).get();\n      expect.fail();\n    } catch (e) {}\n  });\n\n  it(\"empty configuration should be available\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(\n        path.resolve(localAppsPath, \"minimal-working-service.zip\")\n      )\n    );\n    const resp = await db.getServiceConfiguration(mount);\n    expect(resp).to.eql({});\n  });\n\n  it(\"empty minimal configuration should be available\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(\n        path.resolve(localAppsPath, \"minimal-working-service.zip\")\n      )\n    );\n    const resp = await db.getServiceConfiguration(mount, true);\n    expect(resp).to.eql({});\n  });\n\n  it(\"configuration should be available\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-configuration.zip\"))\n    );\n    const resp = await db.getServiceConfiguration(mount);\n    expect(resp).to.have.property(\"test1\");\n    expect(resp.test1).to.not.have.property(\"current\");\n    expect(resp).to.have.property(\"test2\");\n    expect(resp.test2).to.not.have.property(\"current\");\n  });\n\n  it(\"minimal configuration should be available\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-configuration.zip\"))\n    );\n    const resp = await db.getServiceConfiguration(mount, true);\n    expect(resp).to.have.eql({});\n  });\n\n  it(\"configuration should be available after update\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-configuration.zip\"))\n    );\n    const updateResp = await db.updateServiceConfiguration(mount, {\n      test1: \"test\",\n    });\n    expect(updateResp).to.have.property(\"test1\");\n    expect(updateResp.test1).to.have.property(\"current\", \"test\");\n    expect(updateResp.test1).to.not.have.property(\"warning\");\n    expect(updateResp).to.have.property(\"test2\");\n    expect(updateResp.test2).to.not.have.property(\"current\");\n    expect(updateResp.test2).to.not.have.property(\"warning\");\n    const resp = await db.getServiceConfiguration(mount);\n    expect(resp).to.have.property(\"test1\");\n    expect(resp.test1).to.have.property(\"current\", \"test\");\n    expect(resp).to.have.property(\"test2\");\n    expect(resp.test2).to.not.have.property(\"current\");\n  });\n\n  it(\"minimal configuration should be available after update\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-configuration.zip\"))\n    );\n    const updateResp = await db.updateServiceConfiguration(\n      mount,\n      {\n        test1: \"test\",\n      },\n      true\n    );\n    expect(updateResp).to.have.property(\"values\");\n    expect(updateResp.values).to.have.property(\"test1\", \"test\");\n    expect(updateResp.values).to.not.have.property(\"test2\");\n    expect(updateResp).to.not.have.property(\"warnings\");\n    const resp = await db.getServiceConfiguration(mount, true);\n    expect(resp).to.have.property(\"test1\", \"test\");\n    expect(resp).to.not.have.property(\"test2\");\n  });\n\n  it(\"configuration should be available after replace\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-configuration.zip\"))\n    );\n    const replaceResp = await db.replaceServiceConfiguration(mount, {\n      test1: \"test\",\n    });\n    expect(replaceResp).to.have.property(\"test1\");\n    expect(replaceResp.test1).to.have.property(\"current\", \"test\");\n    expect(replaceResp.test1).to.not.have.property(\"warning\");\n    expect(replaceResp).to.have.property(\"test2\");\n    expect(replaceResp.test2).to.not.have.property(\"current\");\n    expect(replaceResp.test2).to.have.property(\"warning\", \"is required\");\n    const resp = await db.getServiceConfiguration(mount);\n    expect(resp).to.have.property(\"test1\");\n    expect(resp.test1).to.have.property(\"current\", \"test\");\n    expect(resp).to.have.property(\"test2\");\n    expect(resp.test2).to.not.have.property(\"current\");\n  });\n\n  it(\"minimal configuration should be available after replace\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-configuration.zip\"))\n    );\n    const replaceResp = await db.replaceServiceConfiguration(\n      mount,\n      {\n        test1: \"test\",\n      },\n      true\n    );\n    expect(replaceResp).to.have.property(\"values\");\n    expect(replaceResp.values).to.have.property(\"test1\", \"test\");\n    expect(replaceResp.values).to.not.have.property(\"test2\");\n    expect(replaceResp).to.have.property(\"warnings\");\n    expect(replaceResp.warnings).to.have.property(\"test2\", \"is required\");\n    const resp = await db.getServiceConfiguration(mount, true);\n    expect(resp).to.have.property(\"test1\", \"test\");\n    expect(resp).to.not.have.property(\"test2\");\n  });\n\n  it(\"configuration should be merged after update\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-configuration.zip\"))\n    );\n    await db.replaceServiceConfiguration(mount, { test2: \"test2\" });\n    await db.updateServiceConfiguration(mount, { test1: \"test1\" });\n    const resp = await db.getServiceConfiguration(mount);\n    expect(resp).to.have.property(\"test1\");\n    expect(resp.test1).to.have.property(\"current\", \"test1\");\n    expect(resp).to.have.property(\"test2\");\n    expect(resp.test2).to.have.property(\"current\", \"test2\");\n  });\n\n  it(\"minimal configuration should be merged after update\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-configuration.zip\"))\n    );\n    await db.replaceServiceConfiguration(mount, { test2: \"test2\" }, true);\n    await db.updateServiceConfiguration(mount, { test1: \"test1\" }, true);\n    const resp = await db.getServiceConfiguration(mount, true);\n    expect(resp).to.have.property(\"test1\", \"test1\");\n    expect(resp).to.have.property(\"test2\", \"test2\");\n  });\n\n  it(\"configuration should be overwritten after replace\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-configuration.zip\"))\n    );\n    await db.updateServiceConfiguration(mount, { test2: \"test2\" });\n    await db.replaceServiceConfiguration(mount, { test1: \"test\" });\n    const resp = await db.getServiceConfiguration(mount);\n    expect(resp).to.have.property(\"test1\");\n    expect(resp.test1).to.have.property(\"current\", \"test\");\n    expect(resp).to.have.property(\"test2\");\n    expect(resp.test2).to.not.have.property(\"current\");\n  });\n\n  it(\"minimal configuration should be overwritten after replace\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-configuration.zip\"))\n    );\n    await db.updateServiceConfiguration(mount, { test2: \"test2\" }, true);\n    await db.replaceServiceConfiguration(mount, { test1: \"test\" }, true);\n    const resp = await db.getServiceConfiguration(mount, true);\n    expect(resp).to.have.property(\"test1\", \"test\");\n    expect(resp).to.not.have.property(\"test2\");\n  });\n\n  it(\"empty dependencies should be available\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(\n        path.resolve(localAppsPath, \"minimal-working-service.zip\")\n      )\n    );\n    const resp = await db.getServiceDependencies(mount);\n    expect(resp).to.eql({});\n  });\n\n  it(\"empty minimal dependencies should be available\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(\n        path.resolve(localAppsPath, \"minimal-working-service.zip\")\n      )\n    );\n    const resp = await db.getServiceDependencies(mount, true);\n    expect(resp).to.eql({});\n  });\n\n  it(\"dependencies should be available\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-dependencies.zip\"))\n    );\n    const resp = await db.getServiceDependencies(mount);\n    expect(resp).to.have.property(\"test1\");\n    expect(resp.test1).to.not.have.property(\"current\");\n    expect(resp).to.have.property(\"test2\");\n    expect(resp.test2).to.not.have.property(\"current\");\n  });\n\n  it(\"minimal dependencies should be available\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-dependencies.zip\"))\n    );\n    const resp = await db.getServiceDependencies(mount, true);\n    expect(resp).to.eql({});\n  });\n\n  it(\"dependencies should be available after updater\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-dependencies.zip\"))\n    );\n    const updateResp = await db.updateServiceDependencies(mount, {\n      test1: \"/test\",\n    });\n    expect(updateResp).to.have.property(\"test1\");\n    expect(updateResp.test1).to.have.property(\"current\", \"/test\");\n    expect(updateResp.test1).to.not.have.property(\"warning\");\n    expect(updateResp).to.have.property(\"test2\");\n    expect(updateResp.test2).to.not.have.property(\"current\");\n    expect(updateResp.test2).to.not.have.property(\"warning\");\n    const resp = await db.getServiceDependencies(mount);\n    expect(resp).to.have.property(\"test1\");\n    expect(resp.test1).to.have.property(\"current\", \"/test\");\n    expect(resp).to.have.property(\"test2\");\n    expect(resp.test2).to.not.have.property(\"current\");\n  });\n\n  it(\"minimal dependencies should be available after updater\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-dependencies.zip\"))\n    );\n    const updateResp = await db.updateServiceDependencies(\n      mount,\n      {\n        test1: \"/test\",\n      },\n      true\n    );\n    expect(updateResp).to.have.property(\"values\");\n    expect(updateResp.values).to.have.property(\"test1\", \"/test\");\n    expect(updateResp.values).to.not.have.property(\"test2\");\n    expect(updateResp).to.not.have.property(\"warnings\");\n    const resp = await db.getServiceDependencies(mount, true);\n    expect(resp).to.have.property(\"test1\", \"/test\");\n    expect(resp).to.not.have.property(\"test2\");\n  });\n\n  it(\"dependencies should be available after replace\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-dependencies.zip\"))\n    );\n    const replaceResp = await db.replaceServiceDependencies(mount, {\n      test1: \"/test\",\n    });\n    expect(replaceResp).to.have.property(\"test1\");\n    expect(replaceResp.test1).to.have.property(\"current\", \"/test\");\n    expect(replaceResp.test1).to.not.have.property(\"warning\");\n    expect(replaceResp).to.have.property(\"test2\");\n    expect(replaceResp.test2).to.not.have.property(\"current\");\n    expect(replaceResp.test2).to.have.property(\"warning\", \"is required\");\n    const resp = await db.getServiceDependencies(mount);\n    expect(resp).to.have.property(\"test1\");\n    expect(resp.test1).to.have.property(\"current\", \"/test\");\n    expect(resp).to.have.property(\"test2\");\n    expect(resp.test2).to.not.have.property(\"current\");\n  });\n\n  it(\"minimal dependencies should be available after replace\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-dependencies.zip\"))\n    );\n    const replaceResp = await db.replaceServiceDependencies(\n      mount,\n      {\n        test1: \"/test\",\n      },\n      true\n    );\n    expect(replaceResp).to.have.property(\"values\");\n    expect(replaceResp.values).to.have.property(\"test1\", \"/test\");\n    expect(replaceResp.values).to.not.have.property(\"test2\");\n    expect(replaceResp).to.have.property(\"warnings\");\n    expect(replaceResp.warnings).to.have.property(\"test2\", \"is required\");\n    const resp = await db.getServiceDependencies(mount, true);\n    expect(resp).to.have.property(\"test1\", \"/test\");\n    expect(resp).to.not.have.property(\"test2\");\n  });\n\n  it(\"dependencies should be merged after update\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-dependencies.zip\"))\n    );\n    const replaceResp = await db.replaceServiceDependencies(mount, {\n      test2: \"/test2\",\n    });\n    expect(replaceResp).to.have.property(\"test1\");\n    expect(replaceResp.test1).to.have.property(\"warning\", \"is required\");\n    expect(replaceResp).to.have.property(\"test2\");\n    expect(replaceResp.test2).to.have.property(\"current\", \"/test2\");\n    const updateResp = await db.updateServiceDependencies(mount, {\n      test1: \"/test1\",\n    });\n    expect(updateResp).to.have.property(\"test1\");\n    expect(updateResp.test1).to.have.property(\"current\", \"/test1\");\n    expect(updateResp.test1).to.not.have.property(\"warning\");\n    expect(updateResp).to.have.property(\"test2\");\n    expect(updateResp.test2).to.have.property(\"current\", \"/test2\");\n    expect(updateResp.test2).to.not.have.property(\"warning\");\n    const resp = await db.getServiceDependencies(mount);\n    expect(resp).to.have.property(\"test1\");\n    expect(resp.test1).to.have.property(\"current\", \"/test1\");\n    expect(resp).to.have.property(\"test2\");\n    expect(resp.test2).to.have.property(\"current\", \"/test2\");\n  });\n\n  it(\"minimal dependencies should be merged after update\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-dependencies.zip\"))\n    );\n    const replaceResp = await db.replaceServiceDependencies(\n      mount,\n      { test2: \"/test2\" },\n      true\n    );\n    expect(replaceResp).to.have.property(\"values\");\n    expect(replaceResp.values).to.have.property(\"test2\", \"/test2\");\n    expect(replaceResp.values).to.not.have.property(\"test1\");\n    expect(replaceResp).to.have.property(\"warnings\");\n    expect(replaceResp.warnings).to.have.property(\"test1\", \"is required\");\n    const updateResp = await db.updateServiceDependencies(\n      mount,\n      {\n        test1: \"/test1\",\n      },\n      true\n    );\n    expect(updateResp).to.have.property(\"values\");\n    expect(updateResp.values).to.have.property(\"test1\", \"/test1\");\n    expect(updateResp.values).to.have.property(\"test2\", \"/test2\");\n    const resp = await db.getServiceDependencies(mount, true);\n    expect(resp).to.have.property(\"test1\", \"/test1\");\n    expect(resp).to.have.property(\"test2\", \"/test2\");\n  });\n\n  it(\"dependencies should be overwritten after replace\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-dependencies.zip\"))\n    );\n    const updateResp = await db.updateServiceDependencies(mount, {\n      test2: \"/test2\",\n    });\n    expect(updateResp).to.have.property(\"test1\");\n    expect(updateResp.test1).to.not.have.property(\"current\");\n    expect(updateResp.test1).to.not.have.property(\"warning\");\n    expect(updateResp).to.have.property(\"test2\");\n    expect(updateResp.test2).to.have.property(\"current\", \"/test2\");\n    expect(updateResp.test2).to.not.have.property(\"warning\");\n    const replaceResp = await db.replaceServiceDependencies(mount, {\n      test1: \"/test1\",\n    });\n    expect(replaceResp).to.have.property(\"test1\");\n    expect(replaceResp.test1).to.have.property(\"current\", \"/test1\");\n    expect(replaceResp.test1).to.not.have.property(\"warning\");\n    expect(replaceResp).to.have.property(\"test2\");\n    expect(replaceResp.test2).to.not.have.property(\"current\");\n    expect(replaceResp.test2).to.have.property(\"warning\", \"is required\");\n    const resp = await db.getServiceDependencies(mount);\n    expect(resp).to.have.property(\"test1\");\n    expect(resp.test1).to.have.property(\"current\", \"/test1\");\n    expect(resp).to.have.property(\"test2\");\n    expect(resp.test2).to.not.have.property(\"current\");\n  });\n\n  it(\"minimal dependencies should be overwritten after replace\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-dependencies.zip\"))\n    );\n    const updateResp = await db.updateServiceDependencies(\n      mount,\n      {\n        test2: \"/test2\",\n      },\n      true\n    );\n    expect(updateResp).to.have.property(\"values\");\n    expect(updateResp.values).to.not.have.property(\"test1\");\n    expect(updateResp.values).to.have.property(\"test2\", \"/test2\");\n    expect(updateResp).to.not.have.property(\"warnings\");\n    const replaceResp = await db.replaceServiceDependencies(\n      mount,\n      {\n        test1: \"/test1\",\n      },\n      true\n    );\n    expect(replaceResp).to.have.property(\"values\");\n    expect(replaceResp.values).to.have.property(\"test1\", \"/test1\");\n    expect(replaceResp.values).to.not.have.property(\"test2\");\n    expect(replaceResp).to.have.property(\"warnings\");\n    expect(replaceResp.warnings).to.have.property(\"test2\", \"is required\");\n    const resp = await db.getServiceDependencies(mount, true);\n    expect(resp).to.have.property(\"test1\", \"/test1\");\n    expect(resp).to.not.have.property(\"test2\");\n  });\n\n  it(\"should be downloadable\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(\n        path.resolve(localAppsPath, \"minimal-working-service.zip\")\n      )\n    );\n    const resp = await db.downloadService(mount);\n    expect(resp).to.be.instanceof(Buffer);\n  });\n\n  it(\"list should allow excluding system services\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(\n        path.resolve(localAppsPath, \"minimal-working-service.zip\")\n      )\n    );\n    const services = await db.listServices();\n    expect(services).to.be.instanceOf(Array);\n    expect(services.length).to.greaterThan(0);\n  });\n\n  it(\"should be contained in service list\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(\n        path.resolve(localAppsPath, \"minimal-working-service.zip\")\n      )\n    );\n    const services = await db.listServices();\n    const service = services.find((service) => service.mount === mount)!;\n    expect(service).to.have.property(\"name\", \"minimal-working-manifest\");\n    expect(service).to.have.property(\"version\", \"0.0.0\");\n    expect(service).to.have.property(\"provides\");\n    expect(service.provides).to.eql({});\n    expect(service).to.have.property(\"development\", false);\n    expect(service).to.have.property(\"legacy\", false);\n  });\n\n  it(\"informations should be returned\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(\n        path.resolve(localAppsPath, \"minimal-working-service.zip\")\n      )\n    );\n    const service = await db.getService(mount);\n    expect(service).to.have.property(\"mount\", mount);\n    expect(service).to.have.property(\"name\", \"minimal-working-manifest\");\n    expect(service).to.have.property(\"version\", \"0.0.0\");\n    expect(service).to.have.property(\"development\", false);\n    expect(service).to.have.property(\"legacy\", false);\n    expect(service).to.have.property(\"manifest\");\n    expect(service.manifest).to.be.an(\"object\");\n    expect(service).to.have.property(\"options\");\n    expect(service.options).to.be.an(\"object\");\n    expect(service).to.have.property(\"checksum\");\n    expect(service.checksum).to.be.a(\"string\");\n  });\n\n  it(\"list of scripts should be available\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(\n        path.resolve(localAppsPath, \"minimal-working-setup-teardown.zip\")\n      )\n    );\n    const scripts = await db.listServiceScripts(mount);\n    expect(scripts).to.have.property(\"setup\", \"Setup\");\n    expect(scripts).to.have.property(\"teardown\", \"Teardown\");\n  });\n\n  it(\"script should be available\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(\n        path.resolve(localAppsPath, \"minimal-working-setup-teardown.zip\")\n      )\n    );\n    const col = `${mount}_setup_teardown`.replace(/\\//, \"\").replace(/-/g, \"_\");\n    expect(await db.collection(col).get()).to.be.instanceOf(Object);\n    await db.runServiceScript(mount, \"teardown\", {});\n    try {\n      await db.collection(col).get();\n      expect.fail();\n    } catch (e) {\n      expect(e).to.be.instanceOf(ArangoError);\n      expect(e.errorNum).to.equal(1203);\n    }\n  });\n\n  it(\"non-existing script should not be available\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"echo-script.zip\"))\n    );\n    try {\n      await db.runServiceScript(mount, \"no\", {});\n    } catch (e) {\n      expect(e).to.be.instanceOf(ArangoError);\n      expect(e.code).to.equal(400);\n      expect(e.errorNum).to.equal(3016);\n    }\n  });\n\n  it(\"should pass argv to script and return exports\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"echo-script.zip\"))\n    );\n    const argv = { hello: \"world\" };\n    const resp = await db.runServiceScript(mount, \"echo\", argv);\n    expect(resp).to.eql([argv]);\n  });\n\n  it(\"should treat array script argv like any other script argv\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"echo-script.zip\"))\n    );\n    const argv = [\"yes\", \"please\"];\n    const resp = await db.runServiceScript(mount, \"echo\", argv);\n    expect(resp).to.eql([argv]);\n  });\n\n  it(\"set devmode should enable devmode\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(\n        path.resolve(localAppsPath, \"minimal-working-service.zip\")\n      )\n    );\n    const resp = await db.getService(mount);\n    expect(resp.development).to.equal(false);\n    const devResp = await db.setServiceDevelopmentMode(mount, true);\n    expect(devResp.development).to.equal(true);\n    const respAfter = await db.getService(mount);\n    expect(respAfter.development).to.equal(true);\n  });\n\n  it(\"clear devmode should disable devmode\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(\n        path.resolve(localAppsPath, \"minimal-working-service.zip\")\n      ),\n      { development: true }\n    );\n    const resp = await db.getService(mount);\n    expect(resp.development).to.equal(true);\n    const devResp = await db.setServiceDevelopmentMode(mount, false);\n    expect(devResp.development).to.equal(false);\n    const respAfter = await db.getService(mount);\n    expect(respAfter.development).to.equal(false);\n  });\n\n  it(\"tests should run\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-tests.zip\"))\n    );\n    const resp = await db.runServiceTests(mount, {});\n    expect(resp).to.have.property(\"stats\");\n    expect(resp).to.have.property(\"tests\");\n    expect(resp).to.have.property(\"pending\");\n    expect(resp).to.have.property(\"failures\");\n    expect(resp).to.have.property(\"passes\");\n  });\n\n  it(\"should deliver the readme\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(path.resolve(localAppsPath, \"with-readme.zip\"))\n    );\n    const resp = await db.getServiceReadme(mount);\n    expect(resp).to.equal(\"Please read this.\");\n  });\n\n  it(\"should indicate a missing readme\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(\n        path.resolve(localAppsPath, \"minimal-working-service.zip\")\n      )\n    );\n    const resp = await db.getServiceReadme(mount);\n    expect(resp).to.equal(\"\");\n  });\n\n  it(\"should provide a swagger description\", async () => {\n    await db.installService(\n      mount,\n      fs.readFileSync(\n        path.resolve(localAppsPath, \"minimal-working-service.zip\")\n      )\n    );\n    const resp = await db.getServiceDocumentation(mount);\n    expect(resp).to.have.property(\"swagger\", \"2.0\");\n    expect(resp).to.have.property(\"basePath\", `/_db/${db.name}${mount}`);\n    expect(resp).to.have.property(\"info\");\n    expect(resp.info).to.have.property(\"title\", \"minimal-working-manifest\");\n    expect(resp.info).to.have.property(\"description\", \"\");\n    expect(resp.info).to.have.property(\"version\", \"0.0.0\");\n    expect(resp.info).to.have.property(\"license\");\n    expect(resp).to.have.property(\"paths\");\n    expect(resp.paths).to.have.property(\"/\");\n    expect(resp.paths[\"/\"]).to.have.property(\"get\");\n  });\n\n  const routes: [string, Function][] = [\n    [\"getService\", (mount: string) => db.getService(mount)],\n    [\n      \"getServiceConfiguration\",\n      (mount: string) => db.getServiceConfiguration(mount),\n    ],\n    [\n      \"getServiceDependencies\",\n      (mount: string) => db.getServiceDependencies(mount),\n    ],\n    [\"listServiceScripts\", (mount: string) => db.listServiceScripts(mount)],\n    [\"upgradeService\", (mount: string) => db.upgradeService(mount, {} as any)],\n    [\n      \"updateServiceConfiguration\",\n      (mount: string) => db.updateServiceConfiguration(mount, {}),\n    ],\n    [\n      \"updateServiceDependencies\",\n      (mount: string) => db.updateServiceDependencies(mount, {}),\n    ],\n    [\"replaceService\", (mount: string) => db.replaceService(mount, {} as any)],\n    [\n      \"replaceServiceConfiguration\",\n      (mount: string) => db.replaceServiceConfiguration(mount, {}),\n    ],\n    [\n      \"replaceServiceDependencies\",\n      (mount: string) => db.replaceServiceDependencies(mount, {}),\n    ],\n    [\n      \"runServiceScript\",\n      (mount: string) => db.runServiceScript(mount, \"xxx\", {}),\n    ],\n    [\"runServiceTests\", (mount: string) => db.runServiceTests(mount, {})],\n    [\"uninstallService\", (mount: string) => db.uninstallService(mount)],\n    [\"downloadService\", (mount: string) => db.downloadService(mount)],\n    [\n      \"enableServiceDevelopmentMode\",\n      (mount: string) => db.setServiceDevelopmentMode(mount, true),\n    ],\n    [\n      \"disableServiceDevelopmentMode\",\n      (mount: string) => db.setServiceDevelopmentMode(mount, false),\n    ],\n    [\n      \"getServiceDocumentation\",\n      (mount: string) => db.getServiceDocumentation(mount),\n    ],\n    [\"getServiceReadme\", (mount: string) => db.getServiceReadme(mount)],\n  ];\n\n  for (const [desc, method] of routes) {\n    it(`should return 400 when mount is omitted for ${desc}`, async () => {\n      try {\n        await method();\n        expect.fail();\n      } catch (e) {\n        expect(e).to.be.instanceOf(ArangoError);\n        expect(e.code).to.equal(400);\n      }\n    });\n\n    it(`should return 400 when mount is invalid for ${desc}`, async () => {\n      try {\n        await method(`/dev/null`);\n        expect.fail();\n      } catch (e) {\n        expect(e).to.be.instanceOf(ArangoError);\n        expect(e.code).to.equal(400);\n      }\n    });\n  }\n});\n"]}